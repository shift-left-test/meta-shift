diff --git a/oelint_adv/__main__.py b/oelint_adv/__main__.py
index 97529a2..244650d 100644
--- a/oelint_adv/__main__.py
+++ b/oelint_adv/__main__.py
@@ -22,8 +22,8 @@ def create_argparser():
         description='Advanced OELint - Check bitbake recipes against OECore styleguide')
     parser.add_argument("--suppress", default=[],
                         action="append", help="Rules to suppress")
-    parser.add_argument("--output", default=sys.stderr,
-                        help="Where to flush the findings (default: stderr)")
+    parser.add_argument("--output", default=sys.stdout,
+                        help="Where to flush the findings (default: stdout)")
     parser.add_argument("--fix", action="store_true", default=False,
                         help="Automatically try to fix the issues")
     parser.add_argument("--nobackup", action="store_true", default=False,
@@ -191,17 +191,35 @@ def run(args):
         traceback.print_exc()
     return []
 
+
+def make_json_report(issues):
+    json_dict = dict()
+    json_dict["issues"] = list()
+    for issue in issues:
+        item = dict()
+        split_data = issue[1].split(":")
+
+        item["file"] = split_data[0]
+        item["line"] = int(split_data[1])
+        item["severity"] = split_data[2]
+        item["rule"] = split_data[3]
+        item["description"] = split_data[4]
+        json_dict["issues"].append(item)
+
+    return json.dumps(json_dict, indent=2) + "\n"
+
+
 def main():  # pragma: no cover
     args = arguments_post(parse_arguments())
 
     issues = run(args)
 
-    if args.output != sys.stderr:
+    if args.output != sys.stdout:
         args.output = open(args.output, "w")
-    args.output.write("\n".join([x[1] for x in issues]) + "\n")
-    if args.output != sys.stderr:
+        args.output.write(make_json_report(issues))
         args.output.close()
-    sys.exit(len(issues))
+    else:
+        args.output.write("\n".join([x[1] for x in issues]) + "\n")
 
 if __name__ == '__main__':
     main()  # pragma: no cover

