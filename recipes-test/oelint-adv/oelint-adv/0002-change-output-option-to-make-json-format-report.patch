diff --git a/oelint_adv/__main__.py b/oelint_adv/__main__.py
index 9ee0ac2..0d2c193 100644
--- a/oelint_adv/__main__.py
+++ b/oelint_adv/__main__.py
@@ -63,8 +63,8 @@ def create_argparser():
     parser.register('action', 'tsappend', TypeSafeAppendAction)
     parser.add_argument('--suppress', default=[],
                         action='tsappend', help='Rules to suppress')
-    parser.add_argument('--output', default=sys.stderr,
-                        help='Where to flush the findings (default: stderr)')
+    parser.add_argument("--output", default=sys.stdout,
+                        help="Where to flush the findings (default: stdout)")
     parser.add_argument('--fix', action='store_true', default=False,
                         help='Automatically try to fix the issues')
     parser.add_argument('--nobackup', action='store_true', default=False,
@@ -302,6 +302,23 @@ def run(args):
     return []
 
 
+def make_json_report(issues):
+    json_dict = dict()
+    json_dict["issues"] = list()
+    for issue in issues:
+        item = dict()
+        split_data = issue[1].split(":")
+
+        item["file"] = split_data[0]
+        item["line"] = int(split_data[1])
+        item["severity"] = split_data[2]
+        item["rule"] = split_data[3]
+        item["description"] = split_data[4]
+        json_dict["issues"].append(item)
+
+    return json.dumps(json_dict, indent=2) + "\n"
+
+
 def main():  # pragma: no cover
     args = arguments_post(parse_arguments())
 
@@ -311,14 +328,15 @@ def main():  # pragma: no cover
 
     issues = run(args)
 
-    if args.output != sys.stderr:
+    if args.output != sys.stdout:
         args.output = open(args.output, 'w')
-    args.output.write('\n'.join([x[1] for x in issues]))
-    if issues:
-        args.output.write('\n')
-    if args.output != sys.stderr:
+        args.output.write(make_json_report(issues))
         args.output.close()
 
+    sys.stdout.write('\n'.join([x[1] for x in issues]))
+    if issues:
+        sys.stdout.write('\n')
+
     exit_code = len(issues) if not args.exit_zero else 0
     sys.exit(exit_code)
 
