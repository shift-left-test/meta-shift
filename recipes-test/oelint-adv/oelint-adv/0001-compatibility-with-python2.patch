diff --git a/README.md b/README.md
index ea6d2c9..9b277f1 100644
--- a/README.md
+++ b/README.md
@@ -209,7 +209,7 @@ from oelint_adv.cls_rule import Rule
 
 class FooMagicRule(Rule):
     def __init__(self):
-        super().__init__(id="foocorp.foo.magic",
+        super(FooMagicRule, self).__init__(id="foocorp.foo.magic",
                          severity="error",
                          message="Too much foo happening here")
 
diff --git a/oelint_adv/__main__.py b/oelint_adv/__main__.py
index d9805f6..6aff094 100644
--- a/oelint_adv/__main__.py
+++ b/oelint_adv/__main__.py
@@ -64,14 +64,14 @@ def arguments_post(args):
         try:
             with open(args.rulefile) as i:
                 set_rulefile(json.load(i))
-        except (FileNotFoundError, json.JSONDecodeError):
+        except (IOError, OSError, json.JSONDecodeError):
             raise argparse.ArgumentTypeError("'rulefile' is not a valid file")
 
     if args.constantfile:
         try:
             with open(args.constantfile) as i:
                 CONSTANTS.AddFromConstantFile(json.load(i))
-        except (FileNotFoundError, json.JSONDecodeError):
+        except (IOError, OSError, json.JSONDecodeError):
             raise argparse.ArgumentTypeError(
                 "'constantfile' is not a valid file")
  
@@ -85,7 +85,7 @@ def arguments_post(args):
                 CONSTANTS.RemoveConstants(_cnt)
             else:
                 CONSTANTS.OverrideConstants(_cnt)
-        except (FileNotFoundError, json.JSONDecodeError):
+        except (IOError, OSError, json.JSONDecodeError):
             raise argparse.ArgumentTypeError(
                 "mod file '{file}' is not a valid file".format(file=mod))
 
@@ -155,7 +155,7 @@ def run(args):
             for f in group:
                 try:
                     stash.AddFile(f)
-                except FileNotFoundError as e: # pragma: no cover
+                except (IOError, OSError) as e: # pragma: no cover
                     if not args.quiet: # pragma: no cover
                         print("Can't open/read: {}".format(e)) # pragma: no cover
 
diff --git a/oelint_adv/cls_rule.py b/oelint_adv/cls_rule.py
index c8d0604..f9c0632 100644
--- a/oelint_adv/cls_rule.py
+++ b/oelint_adv/cls_rule.py
@@ -10,7 +10,7 @@ from oelint_adv.color import get_color
 from oelint_adv.rule_file import get_rulefile, get_noinfo, get_nowarn, get_suppressions
 
 
-class Rule():
+class Rule(object):
     def __init__(self, id="", severity="", message="", onappend=True, onlyappend=False, appendix=[]):
         """constructor
 
diff --git a/oelint_adv/rule_base/rule_append_protvars.py b/oelint_adv/rule_base/rule_append_protvars.py
index 25e2dab..d5e07a9 100644
--- a/oelint_adv/rule_base/rule_append_protvars.py
+++ b/oelint_adv/rule_base/rule_append_protvars.py
@@ -5,7 +5,7 @@ from oelint_parser.constants import CONSTANTS
 
 class VarQuoted(Rule):
     def __init__(self):
-        super().__init__(id="oelint.append.protvars",
+        super(VarQuoted, self).__init__(id="oelint.append.protvars",
                          severity="error",
                          message="Variable '{VAR}' shouldn't be set as part of a bbappend",
                          onlyappend=True,
diff --git a/oelint_adv/rule_base/rule_file_include.py b/oelint_adv/rule_base/rule_file_include.py
index 8992675..0e41b99 100644
--- a/oelint_adv/rule_base/rule_file_include.py
+++ b/oelint_adv/rule_base/rule_file_include.py
@@ -6,7 +6,7 @@ from oelint_parser.helper_files import find_local_or_in_layer, expand_term
 
 class FileIncludeNotFound(Rule):
     def __init__(self):
-        super().__init__(id="oelint.file.includenotfound",
+        super(FileIncludeNotFound, self).__init__(id="oelint.file.includenotfound",
                          severity="warning",
                          message="'{FILE}' was not found")
 
diff --git a/oelint_adv/rule_base/rule_file_includevsrequire.py b/oelint_adv/rule_base/rule_file_includevsrequire.py
index bd5f03b..672fe00 100644
--- a/oelint_adv/rule_base/rule_file_includevsrequire.py
+++ b/oelint_adv/rule_base/rule_file_includevsrequire.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class FileIncludeVsRequire(Rule):
     def __init__(self):
-        super().__init__(id="oelint.file.requireinclude",
+        super(FileIncludeVsRequire, self).__init__(id="oelint.file.requireinclude",
                          severity="warning",
                          message="Use 'require {FILE}' instead of 'include {FILE}'")
 
diff --git a/oelint_adv/rule_base/rule_file_nospaces.py b/oelint_adv/rule_base/rule_file_nospaces.py
index 4081b86..8e9154d 100644
--- a/oelint_adv/rule_base/rule_file_nospaces.py
+++ b/oelint_adv/rule_base/rule_file_nospaces.py
@@ -4,7 +4,7 @@ from oelint_parser.helper_files import get_layer_root
 
 class FileNoSpaces(Rule):
     def __init__(self):
-        super().__init__(id="oelint.file.nospaces",
+        super(FileNoSpaces, self).__init__(id="oelint.file.nospaces",
                          severity="error",
                          message="Path to file contains spaces. Please remove them")
 
diff --git a/oelint_adv/rule_base/rule_file_patch_signedoff.py b/oelint_adv/rule_base/rule_file_patch_signedoff.py
index 962fd93..a50da94 100644
--- a/oelint_adv/rule_base/rule_file_patch_signedoff.py
+++ b/oelint_adv/rule_base/rule_file_patch_signedoff.py
@@ -7,7 +7,7 @@ from oelint_parser.helper_files import get_files
 
 class FilePatchIsSignedOff(Rule):
     def __init__(self):
-        super().__init__(id="oelint.file.patchsignedoff",
+        super(FilePatchIsSignedOff, self).__init__(id="oelint.file.patchsignedoff",
                          severity="warning",
                          message="Patch '{FILE}' should contain a Signed-off-by entry")
 
diff --git a/oelint_adv/rule_base/rule_file_patch_upstreamstatus.py b/oelint_adv/rule_base/rule_file_patch_upstreamstatus.py
index 5958640..68c7be0 100644
--- a/oelint_adv/rule_base/rule_file_patch_upstreamstatus.py
+++ b/oelint_adv/rule_base/rule_file_patch_upstreamstatus.py
@@ -8,7 +8,7 @@ from oelint_parser.helper_files import get_files
 
 class FilePatchIsUpstreamStatus(Rule):
     def __init__(self):
-        super().__init__(id="oelint.file.upstreamstatus",
+        super(FilePatchIsUpstreamStatus, self).__init__(id="oelint.file.upstreamstatus",
                          severity="info",
                          message="Patch '{FILE}' should contain an Upstream-Status entry")
     
diff --git a/oelint_adv/rule_base/rule_file_require.py b/oelint_adv/rule_base/rule_file_require.py
index 2569093..abd17db 100644
--- a/oelint_adv/rule_base/rule_file_require.py
+++ b/oelint_adv/rule_base/rule_file_require.py
@@ -7,7 +7,7 @@ from oelint_parser.helper_files import find_local_or_in_layer, expand_term
 
 class FileRequireNotFound(Rule):
     def __init__(self):
-        super().__init__(id="oelint.file.requirenotfound",
+        super(FileRequireNotFound, self).__init__(id="oelint.file.requirenotfound",
                          severity="error",
                          message="'{FILE}' was not found")
 
diff --git a/oelint_adv/rule_base/rule_file_underscores.py b/oelint_adv/rule_base/rule_file_underscores.py
index 4c26c23..54ca00d 100644
--- a/oelint_adv/rule_base/rule_file_underscores.py
+++ b/oelint_adv/rule_base/rule_file_underscores.py
@@ -7,7 +7,7 @@ from oelint_parser.cls_item import Variable
 
 class FileNoSpaces(Rule):
     def __init__(self):
-        super().__init__(id="oelint.file.underscores",
+        super(FileNoSpaces, self).__init__(id="oelint.file.underscores",
                          severity="error",
                          message="FOO",
                          onappend=False)
diff --git a/oelint_adv/rule_base/rule_func_spec.py b/oelint_adv/rule_base/rule_func_spec.py
index d8fb9ba..8e425dd 100644
--- a/oelint_adv/rule_base/rule_func_spec.py
+++ b/oelint_adv/rule_base/rule_func_spec.py
@@ -10,7 +10,7 @@ from oelint_parser.constants import CONSTANTS
 
 class VarPnBpnUsage(Rule):
     def __init__(self):
-        super().__init__(id="oelint.func.specific",
+        super(VarPnBpnUsage, self).__init__(id="oelint.func.specific",
                          severity="error",
                          message="'{}' is set specific to ['{}'], but isn't known from PACKAGES, MACHINE or resources")
 
diff --git a/oelint_adv/rule_base/rule_newline_consecutive.py b/oelint_adv/rule_base/rule_newline_consecutive.py
index ff367f0..12c0459 100644
--- a/oelint_adv/rule_base/rule_newline_consecutive.py
+++ b/oelint_adv/rule_base/rule_newline_consecutive.py
@@ -3,7 +3,7 @@ from oelint_adv.cls_rule import Rule
 
 class NewLineConsecutive(Rule):
     def __init__(self):
-        super().__init__(id="oelint.newline.consecutive",
+        super(NewLineConsecutive, self).__init__(id="oelint.newline.consecutive",
                          severity="warning",
                          message="Consecutive blank lines should be avoided")
 
diff --git a/oelint_adv/rule_base/rule_newline_end.py b/oelint_adv/rule_base/rule_newline_end.py
index e50df77..3a41aa2 100644
--- a/oelint_adv/rule_base/rule_newline_end.py
+++ b/oelint_adv/rule_base/rule_newline_end.py
@@ -3,7 +3,7 @@ from oelint_adv.cls_rule import Rule
 
 class NewLineEOF(Rule):
     def __init__(self):
-        super().__init__(id="oelint.newline.eof",
+        super(NewLineEOF, self).__init__(id="oelint.newline.eof",
                          severity="warning",
                          message="File shall end on a newline")
 
diff --git a/oelint_adv/rule_base/rule_nospace_line_begin.py b/oelint_adv/rule_base/rule_nospace_line_begin.py
index 9e32821..268fe34 100644
--- a/oelint_adv/rule_base/rule_nospace_line_begin.py
+++ b/oelint_adv/rule_base/rule_nospace_line_begin.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import PythonBlock, Function
 
 class NoSpaceBeginningRule(Rule):
     def __init__(self):
-        super().__init__(id="oelint.spaces.linebeginning",
+        super(NoSpaceBeginningRule, self).__init__(id="oelint.spaces.linebeginning",
                          severity="warning",
                          message="Line shall not begin with a space")
 
diff --git a/oelint_adv/rule_base/rule_nospace_line_cont.py b/oelint_adv/rule_base/rule_nospace_line_cont.py
index c0d836e..93c25da 100644
--- a/oelint_adv/rule_base/rule_nospace_line_cont.py
+++ b/oelint_adv/rule_base/rule_nospace_line_cont.py
@@ -5,7 +5,7 @@ import re
 
 class NoSpaceRuleCont(Rule):
     def __init__(self):
-        super().__init__(id="oelint.spaces.linecont",
+        super(NoSpaceRuleCont, self).__init__(id="oelint.spaces.linecont",
                          severity="error",
                          message="No spaces after line continuation")
 
diff --git a/oelint_adv/rule_base/rule_nospace_line_empty.py b/oelint_adv/rule_base/rule_nospace_line_empty.py
index 2233217..07ddee3 100644
--- a/oelint_adv/rule_base/rule_nospace_line_empty.py
+++ b/oelint_adv/rule_base/rule_nospace_line_empty.py
@@ -3,7 +3,7 @@ from oelint_adv.cls_rule import Rule
 
 class NoSpaceEmptyLineRule(Rule):
     def __init__(self):
-        super().__init__(id="oelint.spaces.emptyline",
+        super(NoSpaceEmptyLineRule, self).__init__(id="oelint.spaces.emptyline",
                          severity="warning",
                          message="Empty lines shall not contain spaces")
 
diff --git a/oelint_adv/rule_base/rule_nospace_line_end.py b/oelint_adv/rule_base/rule_nospace_line_end.py
index ec26f75..89eaf55 100644
--- a/oelint_adv/rule_base/rule_nospace_line_end.py
+++ b/oelint_adv/rule_base/rule_nospace_line_end.py
@@ -5,7 +5,7 @@ from oelint_adv.cls_rule import Rule
 
 class NoSpaceTrailingRule(Rule):
     def __init__(self):
-        super().__init__(id="oelint.spaces.lineend",
+        super(NoSpaceTrailingRule, self).__init__(id="oelint.spaces.lineend",
                          severity="warning",
                          message="Line shall not end with a space")
 
diff --git a/oelint_adv/rule_base/rule_notabs.py b/oelint_adv/rule_base/rule_notabs.py
index 76c854e..434e015 100644
--- a/oelint_adv/rule_base/rule_notabs.py
+++ b/oelint_adv/rule_base/rule_notabs.py
@@ -4,7 +4,7 @@ import re
 
 class NoTabs(Rule):
     def __init__(self):
-        super().__init__(id="oelint.tabs.notabs",
+        super(NoTabs, self).__init__(id="oelint.tabs.notabs",
                          severity="warning",
                          message="Don't use tabs use spaces")
 
diff --git a/oelint_adv/rule_base/rule_tasks_addnotaskbody.py b/oelint_adv/rule_base/rule_tasks_addnotaskbody.py
index dbc061d..2bd0cb4 100644
--- a/oelint_adv/rule_base/rule_tasks_addnotaskbody.py
+++ b/oelint_adv/rule_base/rule_tasks_addnotaskbody.py
@@ -6,7 +6,7 @@ from oelint_parser.constants import CONSTANTS
 
 class TaskAddNoTaskBody(Rule):
     def __init__(self):
-        super().__init__(id="oelint.task.addnotaskbody",
+        super(TaskAddNoTaskBody, self).__init__(id="oelint.task.addnotaskbody",
                          severity="warning",
                          message="The added task '{FUNC}' is not existing or has no body")
 
diff --git a/oelint_adv/rule_base/rule_tasks_anon_python.py b/oelint_adv/rule_base/rule_tasks_anon_python.py
index be27a5f..14e985b 100644
--- a/oelint_adv/rule_base/rule_tasks_anon_python.py
+++ b/oelint_adv/rule_base/rule_tasks_anon_python.py
@@ -3,7 +3,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskNoAnonPython(Rule):
     def __init__(self):
-        super().__init__(id="oelint.task.noanonpython",
+        super(TaskNoAnonPython, self).__init__(id="oelint.task.noanonpython",
                          severity="warning",
                          message="Avoid anonymous python functions as they expensive and come with all sorts of side effects")
 
@@ -13,4 +13,4 @@ class TaskNoAnonPython(Rule):
         for i in items:
             if i.IsPython and i.FuncName.strip() in ["", "anonymous"]:
                 res += self.finding(i.Origin, i.InFileLine)
-        return res
\ No newline at end of file
+        return res
diff --git a/oelint_adv/rule_base/rule_tasks_customorder.py b/oelint_adv/rule_base/rule_tasks_customorder.py
index 5af7afc..8de340d 100644
--- a/oelint_adv/rule_base/rule_tasks_customorder.py
+++ b/oelint_adv/rule_base/rule_tasks_customorder.py
@@ -8,7 +8,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskCustomOrder(Rule):
     def __init__(self):
-        super().__init__(id="oelint.task.customorder",
+        super(TaskCustomOrder, self).__init__(id="oelint.task.customorder",
                          severity="error",
                          message="<FOO>")
 
diff --git a/oelint_adv/rule_base/rule_tasks_doc_strings.py b/oelint_adv/rule_base/rule_tasks_doc_strings.py
index 905fc85..119ebbb 100644
--- a/oelint_adv/rule_base/rule_tasks_doc_strings.py
+++ b/oelint_adv/rule_base/rule_tasks_doc_strings.py
@@ -6,7 +6,7 @@ from oelint_parser.constants import CONSTANTS
 
 class TaskDocStrings(Rule):
     def __init__(self):
-        super().__init__(id="oelint.task.docstrings",
+        super(TaskDocStrings, self).__init__(id="oelint.task.docstrings",
                          severity="info",
                          message="Every custom task should have a doc string set by task[doc] = \"\"")
 
diff --git a/oelint_adv/rule_base/rule_tasks_heredocs.py b/oelint_adv/rule_base/rule_tasks_heredocs.py
index 0a341a3..5b16ebd 100644
--- a/oelint_adv/rule_base/rule_tasks_heredocs.py
+++ b/oelint_adv/rule_base/rule_tasks_heredocs.py
@@ -5,7 +5,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskInstallNoCp(Rule):
     def __init__(self):
-        super().__init__(id="oelint.task.heredocs",
+        super(TaskInstallNoCp, self).__init__(id="oelint.task.heredocs",
                          severity="warning",
                          message="Usage of heredocs should be avoided. Use files instead")
 
diff --git a/oelint_adv/rule_base/rule_tasks_multiappends.py b/oelint_adv/rule_base/rule_tasks_multiappends.py
index 64b9f51..c622c81 100644
--- a/oelint_adv/rule_base/rule_tasks_multiappends.py
+++ b/oelint_adv/rule_base/rule_tasks_multiappends.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskMultiFragments(Rule):
     def __init__(self):
-        super().__init__(id="oelint.task.multifragments",
+        super(TaskMultiFragments, self).__init__(id="oelint.task.multifragments",
                          severity="info",
                          message="Multiple fragments of the same function in the same file should be merged")
 
diff --git a/oelint_adv/rule_base/rule_tasks_no_cp.py b/oelint_adv/rule_base/rule_tasks_no_cp.py
index 5ab18e5..e5aac8f 100644
--- a/oelint_adv/rule_base/rule_tasks_no_cp.py
+++ b/oelint_adv/rule_base/rule_tasks_no_cp.py
@@ -5,7 +5,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskInstallNoCp(Rule):
     def __init__(self):
-        super().__init__(id="oelint.task.nocopy",
+        super(TaskInstallNoCp, self).__init__(id="oelint.task.nocopy",
                          severity="error",
                          message="'cp' shall not be used in do_install. Use 'install'")
 
diff --git a/oelint_adv/rule_base/rule_tasks_no_mkdir.py b/oelint_adv/rule_base/rule_tasks_no_mkdir.py
index a05c71c..cc1b1c9 100644
--- a/oelint_adv/rule_base/rule_tasks_no_mkdir.py
+++ b/oelint_adv/rule_base/rule_tasks_no_mkdir.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskInstallNoMkdir(Rule):
     def __init__(self):
-        super().__init__(id="oelint.task.nomkdir",
+        super(TaskInstallNoMkdir, self).__init__(id="oelint.task.nomkdir",
                          severity="error",
                          message="'mkdir' shall not be used in do_install. Use 'install'")
 
diff --git a/oelint_adv/rule_base/rule_tasks_nopython_prefix.py b/oelint_adv/rule_base/rule_tasks_nopython_prefix.py
index 1783af5..3a0c089 100644
--- a/oelint_adv/rule_base/rule_tasks_nopython_prefix.py
+++ b/oelint_adv/rule_base/rule_tasks_nopython_prefix.py
@@ -6,7 +6,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskNoPythonPrefix(Rule):
     def __init__(self):
-        super().__init__(id="oelint.task.nopythonprefix",
+        super(TaskNoPythonPrefix, self).__init__(id="oelint.task.nopythonprefix",
                          severity="warning",
                          message="Tasks containing shell code, should not be prefixed with python in function header")
 
diff --git a/oelint_adv/rule_base/rule_tasks_order.py b/oelint_adv/rule_base/rule_tasks_order.py
index 4f6e0c0..c4f3a38 100644
--- a/oelint_adv/rule_base/rule_tasks_order.py
+++ b/oelint_adv/rule_base/rule_tasks_order.py
@@ -5,7 +5,7 @@ from oelint_parser.constants import CONSTANTS
 
 class TaskOrder(Rule):
     def __init__(self):
-        super().__init__(id="oelint.task.order",
+        super(TaskOrder, self).__init__(id="oelint.task.order",
                          severity="warning",
                          message="<FOO>",
                          appendix=CONSTANTS.FunctionsOrder)
diff --git a/oelint_adv/rule_base/rule_tasks_python_prefix.py b/oelint_adv/rule_base/rule_tasks_python_prefix.py
index ddce6d2..0757eed 100644
--- a/oelint_adv/rule_base/rule_tasks_python_prefix.py
+++ b/oelint_adv/rule_base/rule_tasks_python_prefix.py
@@ -6,7 +6,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskPythonPrefix(Rule):
     def __init__(self):
-        super().__init__(id="oelint.task.pythonprefix",
+        super(TaskPythonPrefix, self).__init__(id="oelint.task.pythonprefix",
                          severity="warning",
                          message="Tasks containing python code, should be prefixed with python in function header")
 
diff --git a/oelint_adv/rule_base/rule_var_appendop.py b/oelint_adv/rule_base/rule_var_appendop.py
index 0a28c6d..36c061d 100644
--- a/oelint_adv/rule_base/rule_var_appendop.py
+++ b/oelint_adv/rule_base/rule_var_appendop.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarAppendOperation(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.appendop",
+        super(VarAppendOperation, self).__init__(id="oelint.vars.appendop",
                          severity="error",
                          message="Use '{}' instead of '{}' as it overwrites '{}'")
 
diff --git a/oelint_adv/rule_base/rule_var_autorev.py b/oelint_adv/rule_base/rule_var_autorev.py
index 0ff67db..ed14f1d 100644
--- a/oelint_adv/rule_base/rule_var_autorev.py
+++ b/oelint_adv/rule_base/rule_var_autorev.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarAutorev(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.autorev",
+        super(VarAutorev, self).__init__(id="oelint.vars.autorev",
                          severity="warning",
                          message="The usage of 'AUTOREV' for SRCREV leads to not reproducible builds")
 
diff --git a/oelint_adv/rule_base/rule_var_bbvars.py b/oelint_adv/rule_base/rule_var_bbvars.py
index bb2fbb9..db5ae37 100644
--- a/oelint_adv/rule_base/rule_var_bbvars.py
+++ b/oelint_adv/rule_base/rule_var_bbvars.py
@@ -5,7 +5,7 @@ from oelint_parser.constants import CONSTANTS
 
 class VarQuoted(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.bbvars",
+        super(VarQuoted, self).__init__(id="oelint.vars.bbvars",
                          severity="warning",
                          message="Variable '{VAR}' should be set on a disto/layer or local.conf level, not in a recipe",
                          appendix=CONSTANTS.VariablesProtected)
diff --git a/oelint_adv/rule_base/rule_var_bugtracker_url.py b/oelint_adv/rule_base/rule_var_bugtracker_url.py
index 2dbf723..2f43994 100644
--- a/oelint_adv/rule_base/rule_var_bugtracker_url.py
+++ b/oelint_adv/rule_base/rule_var_bugtracker_url.py
@@ -5,7 +5,7 @@ from oelint_parser.helper_files import get_scr_components
 
 class VarBugtrackerIsUrl(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.bugtrackerisurl",
+        super(VarBugtrackerIsUrl, self).__init__(id="oelint.vars.bugtrackerisurl",
                          severity="warning",
                          message="'BUGTRACKER' should be an URL")
 
diff --git a/oelint_adv/rule_base/rule_var_depends_append.py b/oelint_adv/rule_base/rule_var_depends_append.py
index d3b59da..5e09504 100644
--- a/oelint_adv/rule_base/rule_var_depends_append.py
+++ b/oelint_adv/rule_base/rule_var_depends_append.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarDependsAppend(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.dependsappend",
+        super(VarDependsAppend, self).__init__(id="oelint.vars.dependsappend",
                          severity="error",
                          message="DEPENDS should only be appended, not overwritten")
 
diff --git a/oelint_adv/rule_base/rule_var_depends_ordered.py b/oelint_adv/rule_base/rule_var_depends_ordered.py
index be347d8..664b44b 100644
--- a/oelint_adv/rule_base/rule_var_depends_ordered.py
+++ b/oelint_adv/rule_base/rule_var_depends_ordered.py
@@ -7,7 +7,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarDependsOrdered(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.dependsordered",
+        super(VarDependsOrdered, self).__init__(id="oelint.vars.dependsordered",
                          severity="warning",
                          message="'{VAR}' entries should be ordered alphabetically")
 
diff --git a/oelint_adv/rule_base/rule_var_descriptionsame.py b/oelint_adv/rule_base/rule_var_descriptionsame.py
index 37dc6ac..48e950d 100644
--- a/oelint_adv/rule_base/rule_var_descriptionsame.py
+++ b/oelint_adv/rule_base/rule_var_descriptionsame.py
@@ -3,7 +3,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarDescSame(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.descriptionsame",
+        super(VarDescSame, self).__init__(id="oelint.vars.descriptionsame",
                          severity="warning",
                          message="'DESCRIPTION' is the same a 'SUMMARY' - it can be removed then")
 
diff --git a/oelint_adv/rule_base/rule_var_descriptiontooshort.py b/oelint_adv/rule_base/rule_var_descriptiontooshort.py
index 45cf868..fa9be56 100644
--- a/oelint_adv/rule_base/rule_var_descriptiontooshort.py
+++ b/oelint_adv/rule_base/rule_var_descriptiontooshort.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarDescSameTooBrief(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.descriptiontoobrief",
+        super(VarDescSameTooBrief, self).__init__(id="oelint.vars.descriptiontoobrief",
                          severity="warning",
                          message="'DESCRIPTION' is the shorter than 'SUMMARY'")
 
diff --git a/oelint_adv/rule_base/rule_var_doublemodify.py b/oelint_adv/rule_base/rule_var_doublemodify.py
index 43447df..ac6822d 100644
--- a/oelint_adv/rule_base/rule_var_doublemodify.py
+++ b/oelint_adv/rule_base/rule_var_doublemodify.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSectionLowercase(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.doublemodify",
+        super(VarSectionLowercase, self).__init__(id="oelint.vars.doublemodify",
                          severity="error",
                          message="Multiple modifiers of append/prepend/remove/+= found in one operation")
 
diff --git a/oelint_adv/rule_base/rule_var_duplicates.py b/oelint_adv/rule_base/rule_var_duplicates.py
index e244bc0..e870dd2 100644
--- a/oelint_adv/rule_base/rule_var_duplicates.py
+++ b/oelint_adv/rule_base/rule_var_duplicates.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarDuplicates(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.duplicate",
+        super(VarDuplicates, self).__init__(id="oelint.vars.duplicate",
                          severity="warning",
                          message="<FOO>")
 
diff --git a/oelint_adv/rule_base/rule_var_filesextrapaths.py b/oelint_adv/rule_base/rule_var_filesextrapaths.py
index 0ba1360..c6863f5 100644
--- a/oelint_adv/rule_base/rule_var_filesextrapaths.py
+++ b/oelint_adv/rule_base/rule_var_filesextrapaths.py
@@ -6,7 +6,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarBugtrackerIsUrl(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.fileextrapaths",
+        super(VarBugtrackerIsUrl, self).__init__(id="oelint.vars.fileextrapaths",
                          severity="warning",
                          message="'FILESEXTRAPATHS' shouldn't be used in a bb file")
 
diff --git a/oelint_adv/rule_base/rule_var_filesextrapathsop.py b/oelint_adv/rule_base/rule_var_filesextrapathsop.py
index 68778ed..9ccfdd0 100644
--- a/oelint_adv/rule_base/rule_var_filesextrapathsop.py
+++ b/oelint_adv/rule_base/rule_var_filesextrapathsop.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarBugtrackerIsUrl(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.fileextrapathsop",
+        super(VarBugtrackerIsUrl, self).__init__(id="oelint.vars.fileextrapathsop",
                          severity="error",
                          message="'FILESEXTRAPATHS' should only be used in combination with ' := '")
 
diff --git a/oelint_adv/rule_base/rule_var_filesoverride.py b/oelint_adv/rule_base/rule_var_filesoverride.py
index 988f2b8..859dee4 100644
--- a/oelint_adv/rule_base/rule_var_filesoverride.py
+++ b/oelint_adv/rule_base/rule_var_filesoverride.py
@@ -5,7 +5,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarFilesOverride(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.filesoverride",
+        super(VarFilesOverride, self).__init__(id="oelint.var.filesoverride",
                          severity="warning",
                          message="'{}' should not be overriden")
 
diff --git a/oelint_adv/rule_base/rule_var_homepage.py b/oelint_adv/rule_base/rule_var_homepage.py
index 73569ab..b0cdc7e 100644
--- a/oelint_adv/rule_base/rule_var_homepage.py
+++ b/oelint_adv/rule_base/rule_var_homepage.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarHomepagePrefix(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.homepageprefix",
+        super(VarHomepagePrefix, self).__init__(id="oelint.vars.homepageprefix",
                          severity="warning",
                          message="'HOMEPAGE' should start with 'http://' or 'https://'")
 
diff --git a/oelint_adv/rule_base/rule_var_homepageping.py b/oelint_adv/rule_base/rule_var_homepageping.py
index abda22b..ddf8c2f 100644
--- a/oelint_adv/rule_base/rule_var_homepageping.py
+++ b/oelint_adv/rule_base/rule_var_homepageping.py
@@ -1,13 +1,17 @@
 from oelint_parser.cls_item import Variable
 from oelint_adv.cls_rule import Rule
 
-from urllib.request import urlopen, Request
-from urllib.error import HTTPError, URLError
+try:
+    from urllib.request import urlopen, Request
+    from urllib.error import HTTPError, URLError
+except ImportError:
+    from urllib2 import urlopen, Request
+    from urllib2 import HTTPError, URLError
 
 
 class VarHomepagePing(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.homepageping",
+        super(VarHomepagePing, self).__init__(id="oelint.vars.homepageping",
                          severity="warning",
                          message="'HOMEPAGE' isn't reachable")
 
diff --git a/oelint_adv/rule_base/rule_var_inconsspaces.py b/oelint_adv/rule_base/rule_var_inconsspaces.py
index b46cc54..5b83eb4 100644
--- a/oelint_adv/rule_base/rule_var_inconsspaces.py
+++ b/oelint_adv/rule_base/rule_var_inconsspaces.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarInconSpaces(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.inconspaces",
+        super(VarInconSpaces, self).__init__(id="oelint.vars.inconspaces",
                          severity="error",
                          message="<FOO>")
 
diff --git a/oelint_adv/rule_base/rule_var_insaneskip.py b/oelint_adv/rule_base/rule_var_insaneskip.py
index 327c09e..9b3a210 100644
--- a/oelint_adv/rule_base/rule_var_insaneskip.py
+++ b/oelint_adv/rule_base/rule_var_insaneskip.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarInsaneSkip(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.insaneskip",
+        super(VarInsaneSkip, self).__init__(id="oelint.vars.insaneskip",
                          severity="error",
                          message="INSANE_SKIP should be avoided at any cost")
 
diff --git a/oelint_adv/rule_base/rule_var_license_remote.py b/oelint_adv/rule_base/rule_var_license_remote.py
index c2e4f0b..0e3937b 100644
--- a/oelint_adv/rule_base/rule_var_license_remote.py
+++ b/oelint_adv/rule_base/rule_var_license_remote.py
@@ -5,7 +5,7 @@ from oelint_parser.helper_files import get_scr_components, expand_term
 
 class VarLicenseRemoteFile(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.licenseremotefile",
+        super(VarLicenseRemoteFile, self).__init__(id="oelint.var.licenseremotefile",
                          severity="warning",
                          message="License-File should be a remote file")
 
diff --git a/oelint_adv/rule_base/rule_var_licfileprefix.py b/oelint_adv/rule_base/rule_var_licfileprefix.py
index 835a5be..0bdddb5 100644
--- a/oelint_adv/rule_base/rule_var_licfileprefix.py
+++ b/oelint_adv/rule_base/rule_var_licfileprefix.py
@@ -6,7 +6,7 @@ from oelint_parser.helper_files import get_scr_components
 
 class VarLicFilePrefix(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.licfileprefix",
+        super(VarLicFilePrefix, self).__init__(id="oelint.vars.licfileprefix",
                          severity="warning",
                          message="Prefix '{PATH}' to LIC_FILES_CHKSUM is not needed")
 
diff --git a/oelint_adv/rule_base/rule_var_misspell.py b/oelint_adv/rule_base/rule_var_misspell.py
index 30f6399..f832a4d 100644
--- a/oelint_adv/rule_base/rule_var_misspell.py
+++ b/oelint_adv/rule_base/rule_var_misspell.py
@@ -7,7 +7,7 @@ from difflib import SequenceMatcher
 
 class VarMisspell(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.mispell",
+        super(VarMisspell, self).__init__(id="oelint.vars.mispell",
                          severity="warning",
                          message="<FOO>")
 
diff --git a/oelint_adv/rule_base/rule_var_multilineindent.py b/oelint_adv/rule_base/rule_var_multilineindent.py
index f82c9bf..8cb4f8e 100644
--- a/oelint_adv/rule_base/rule_var_multilineindent.py
+++ b/oelint_adv/rule_base/rule_var_multilineindent.py
@@ -6,7 +6,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarMultiLineIndent(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.multilineident",
+        super(VarMultiLineIndent, self).__init__(id="oelint.vars.multilineident",
                          severity="info",
                          message="On a multiline assignment, line indent is desirable. {} set, {} desirable")
 
diff --git a/oelint_adv/rule_base/rule_var_notneededspace.py b/oelint_adv/rule_base/rule_var_notneededspace.py
index 4fcf75f..1b0b852 100644
--- a/oelint_adv/rule_base/rule_var_notneededspace.py
+++ b/oelint_adv/rule_base/rule_var_notneededspace.py
@@ -6,7 +6,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSectionLowercase(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.notneededspace",
+        super(VarSectionLowercase, self).__init__(id="oelint.vars.notneededspace",
                          severity="info",
                          message="Space at the beginning of the var is not needed")
 
diff --git a/oelint_adv/rule_base/rule_var_p_usage.py b/oelint_adv/rule_base/rule_var_p_usage.py
index 927c566..15a0726 100644
--- a/oelint_adv/rule_base/rule_var_p_usage.py
+++ b/oelint_adv/rule_base/rule_var_p_usage.py
@@ -5,7 +5,7 @@ from oelint_parser.helper_files import get_scr_components
 
 class VarPnBpnUsage(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.pbpusage",
+        super(VarPnBpnUsage, self).__init__(id="oelint.vars.pbpusage",
                          severity="error",
                          message="${BP} should be used instead of ${P}")
 
diff --git a/oelint_adv/rule_base/rule_var_pkgspecific.py b/oelint_adv/rule_base/rule_var_pkgspecific.py
index 092a860..af9643f 100644
--- a/oelint_adv/rule_base/rule_var_pkgspecific.py
+++ b/oelint_adv/rule_base/rule_var_pkgspecific.py
@@ -7,7 +7,7 @@ class VarPkgSpecific(Rule):
     def __init__(self):
         self.needles = ['RDEPENDS', 'RRECOMMENDS', 'RSUGGESTS', 'RCONFLICTS', 'RPROVIDES', 'RREPLACES',
                    'FILES', 'pkg_preinst', 'pkg_postinst', 'pkg_prerm', 'pkg_postrm', 'ALLOW_EMPTY']
-        super().__init__(id="oelint.vars.pkgspecific",
+        super(VarPkgSpecific, self).__init__(id="oelint.vars.pkgspecific",
                          severity="error",
                          message="Variable {VAR} is package-specific and therefore it should be {VAR}_${PN}",
                          appendix=self.needles)
diff --git a/oelint_adv/rule_base/rule_var_pn_usage.py b/oelint_adv/rule_base/rule_var_pn_usage.py
index 2a12c65..84a86dc 100644
--- a/oelint_adv/rule_base/rule_var_pn_usage.py
+++ b/oelint_adv/rule_base/rule_var_pn_usage.py
@@ -5,7 +5,7 @@ from oelint_parser.helper_files import get_scr_components
 
 class VarPnBpnUsage(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.pnbpnusage",
+        super(VarPnBpnUsage, self).__init__(id="oelint.vars.pnbpnusage",
                          severity="error",
                          message="${BPN} should be used instead of ${PN}")
 
diff --git a/oelint_adv/rule_base/rule_var_pn_usage_discouraged.py b/oelint_adv/rule_base/rule_var_pn_usage_discouraged.py
index 52f086f..7b12ab3 100644
--- a/oelint_adv/rule_base/rule_var_pn_usage_discouraged.py
+++ b/oelint_adv/rule_base/rule_var_pn_usage_discouraged.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarPnUsageDiscouraged(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.pnusagediscouraged",
+        super(VarPnUsageDiscouraged, self).__init__(id="oelint.vars.pnusagediscouraged",
                          severity="warning",
                          message="Variable shouldn't contain ${PN} or ${BPN}")
 
diff --git a/oelint_adv/rule_base/rule_var_quoted.py b/oelint_adv/rule_base/rule_var_quoted.py
index d334451..379aade 100644
--- a/oelint_adv/rule_base/rule_var_quoted.py
+++ b/oelint_adv/rule_base/rule_var_quoted.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarQuoted(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.valuequoted",
+        super(VarQuoted, self).__init__(id="oelint.vars.valuequoted",
                          severity="error",
                          message="Variable value should be quoted")
 
diff --git a/oelint_adv/rule_base/rule_var_rootfscmd.py b/oelint_adv/rule_base/rule_var_rootfscmd.py
index b723f80..4f50a8f 100644
--- a/oelint_adv/rule_base/rule_var_rootfscmd.py
+++ b/oelint_adv/rule_base/rule_var_rootfscmd.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarRootfsPostprocessCommand(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.rootfspostcmd",
+        super(VarRootfsPostprocessCommand, self).__init__(id="oelint.var.rootfspostcmd",
                          severity="warning",
                          message="ROOTFS_POSTPROCESS_COMMAND should not have trailing blanks")
 
diff --git a/oelint_adv/rule_base/rule_var_section_lowercase.py b/oelint_adv/rule_base/rule_var_section_lowercase.py
index 3b6ce3a..e22107b 100644
--- a/oelint_adv/rule_base/rule_var_section_lowercase.py
+++ b/oelint_adv/rule_base/rule_var_section_lowercase.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSectionLowercase(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.sectionlowercase",
+        super(VarSectionLowercase, self).__init__(id="oelint.vars.sectionlowercase",
                          severity="warning",
                          message="'SECTION' should only lowercase characters")
 
diff --git a/oelint_adv/rule_base/rule_var_spaces_assignment.py b/oelint_adv/rule_base/rule_var_spaces_assignment.py
index dcdfb2f..b756b68 100644
--- a/oelint_adv/rule_base/rule_var_spaces_assignment.py
+++ b/oelint_adv/rule_base/rule_var_spaces_assignment.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSpacesOnAssignment(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.spacesassignment",
+        super(VarSpacesOnAssignment, self).__init__(id="oelint.vars.spacesassignment",
                          severity="warning",
                          message="Suggest spaces around variable assignment. E.g. 'FOO = \"BAR\"'")
 
diff --git a/oelint_adv/rule_base/rule_var_spec.py b/oelint_adv/rule_base/rule_var_spec.py
index 55ad9d2..e2f68b0 100644
--- a/oelint_adv/rule_base/rule_var_spec.py
+++ b/oelint_adv/rule_base/rule_var_spec.py
@@ -8,7 +8,7 @@ from oelint_parser.constants import CONSTANTS
 
 class VarPnBpnUsage(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.specific",
+        super(VarPnBpnUsage, self).__init__(id="oelint.vars.specific",
                          severity="error",
                          message="'{}' is set specific to ['{}'], but isn't known from PACKAGES, MACHINE or resources",
                          onappend=False)
diff --git a/oelint_adv/rule_base/rule_var_src_uri.py b/oelint_adv/rule_base/rule_var_src_uri.py
index e9b223b..2e06b6c 100644
--- a/oelint_adv/rule_base/rule_var_src_uri.py
+++ b/oelint_adv/rule_base/rule_var_src_uri.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCUriOptions(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.srcurioptions",
+        super(VarSRCUriOptions, self).__init__(id="oelint.vars.srcurioptions",
                          severity="warning",
                          message="<FOO>")
         self._general_options = [
diff --git a/oelint_adv/rule_base/rule_var_src_uri_append.py b/oelint_adv/rule_base/rule_var_src_uri_append.py
index 5e6020d..edd2fcb 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_append.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_append.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSRCUriGitTag(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.srcuriappend",
+        super(VarSRCUriGitTag, self).__init__(id="oelint.vars.srcuriappend",
                          severity="error",
                          message="Use SRC_URI_append otherwise this will override weak defaults by inherit")
 
diff --git a/oelint_adv/rule_base/rule_var_src_uri_domains.py b/oelint_adv/rule_base/rule_var_src_uri_domains.py
index b7e34b2..272889f 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_domains.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_domains.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCUriOptions(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.srcuridomains",
+        super(VarSRCUriOptions, self).__init__(id="oelint.vars.srcuridomains",
                          severity="warning",
                          message="Recipe is pulling from different domains, this will likely cause issues")
 
diff --git a/oelint_adv/rule_base/rule_var_src_uri_file.py b/oelint_adv/rule_base/rule_var_src_uri_file.py
index eee9ad3..71b4274 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_file.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_file.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCUriGitTag(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.srcurifile",
+        super(VarSRCUriGitTag, self).__init__(id="oelint.vars.srcurifile",
                          severity="warning",
                          message="First item of SRC_URI should not be a file:// fetcher, if multiple fetcher are used")
 
diff --git a/oelint_adv/rule_base/rule_var_src_uri_gittag.py b/oelint_adv/rule_base/rule_var_src_uri_gittag.py
index 91b5d76..4fe048c 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_gittag.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_gittag.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCUriGitTag(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.srcurigittag",
+        super(VarSRCUriGitTag, self).__init__(id="oelint.vars.srcurigittag",
                          severity="warning",
                          message="'tag' in SRC_URI-options leads to not-reproducible builds as git-tags can move around. Use explicit SRCREV")
 
diff --git a/oelint_adv/rule_base/rule_var_src_uri_srcrevtag.py b/oelint_adv/rule_base/rule_var_src_uri_srcrevtag.py
index 555252d..3882007 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_srcrevtag.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_srcrevtag.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCUriSRCREVTag(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.srcurisrcrevtag",
+        super(VarSRCUriSRCREVTag, self).__init__(id="oelint.vars.srcurisrcrevtag",
                          severity="error",
                          message="'tag' in SRC_URI and a SRCREV for the same component doesn't compute")
 
diff --git a/oelint_adv/rule_base/rule_var_src_uri_wildcard.py b/oelint_adv/rule_base/rule_var_src_uri_wildcard.py
index d06b325..10d4a8c 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_wildcard.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_wildcard.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCURIWildcard(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.srcuriwildcard",
+        super(VarSRCURIWildcard, self).__init__(id="oelint.var.srcuriwildcard",
                          severity="error",
                          message="'SRC_URI' should not contain any wildcards")
 
diff --git a/oelint_adv/rule_base/rule_var_summary_80chars.py b/oelint_adv/rule_base/rule_var_summary_80chars.py
index b36ed3e..5a28e7b 100644
--- a/oelint_adv/rule_base/rule_var_summary_80chars.py
+++ b/oelint_adv/rule_base/rule_var_summary_80chars.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSummary80Chars(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.summary80chars",
+        super(VarSummary80Chars, self).__init__(id="oelint.vars.summary80chars",
                          severity="warning",
                          message="'SUMMARY' should not be longer than 80 characters")
 
diff --git a/oelint_adv/rule_base/rule_var_summary_linebreaks.py b/oelint_adv/rule_base/rule_var_summary_linebreaks.py
index 97a9fd6..ccba67b 100644
--- a/oelint_adv/rule_base/rule_var_summary_linebreaks.py
+++ b/oelint_adv/rule_base/rule_var_summary_linebreaks.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSummaryLinebreaks(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.summarylinebreaks",
+        super(VarSummaryLinebreaks, self).__init__(id="oelint.vars.summarylinebreaks",
                          severity="warning",
                          message="'SUMMARY' should not contain line breaks")
 
diff --git a/oelint_adv/rule_base/rule_var_trailslash.py b/oelint_adv/rule_base/rule_var_trailslash.py
index fd192f4..db6a527 100644
--- a/oelint_adv/rule_base/rule_var_trailslash.py
+++ b/oelint_adv/rule_base/rule_var_trailslash.py
@@ -5,7 +5,7 @@ from oelint_parser.helper_files import expand_term
 
 class VarTrailingSlash(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.notrailingslash",
+        super(VarTrailingSlash, self).__init__(id="oelint.vars.notrailingslash",
                          severity="error",
                          message="'{}' must not end with a '/'")
 
diff --git a/oelint_adv/rule_base/rule_vars_bbclassextends.py b/oelint_adv/rule_base/rule_vars_bbclassextends.py
index 79697b2..5ea6f75 100644
--- a/oelint_adv/rule_base/rule_vars_bbclassextends.py
+++ b/oelint_adv/rule_base/rule_vars_bbclassextends.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarBbclassextend(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.bbclassextend",
+        super(VarBbclassextend, self).__init__(id="oelint.var.bbclassextend",
                          severity="info",
                          message="BBCLASSEXTEND should be set if possible")
 
diff --git a/oelint_adv/rule_base/rule_vars_filessetting.py b/oelint_adv/rule_base/rule_vars_filessetting.py
index 3032da9..adc827f 100644
--- a/oelint_adv/rule_base/rule_vars_filessetting.py
+++ b/oelint_adv/rule_base/rule_vars_filessetting.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarUnneededFilesSetting(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.filessetting",
+        super(VarUnneededFilesSetting, self).__init__(id="oelint.vars.filessetting",
                          severity="warning",
                          message="Check for improvable FILES settings",
                          appendix=["hidden", "double"])
diff --git a/oelint_adv/rule_base/rule_vars_improperinherit.py b/oelint_adv/rule_base/rule_vars_improperinherit.py
index 65bab12..8383a17 100644
--- a/oelint_adv/rule_base/rule_vars_improperinherit.py
+++ b/oelint_adv/rule_base/rule_vars_improperinherit.py
@@ -8,7 +8,7 @@ from oelint_parser.helper_files import expand_term
 
 class VarImproperInherit(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.improperinherit",
+        super(VarImproperInherit, self).__init__(id="oelint.var.improperinherit",
                          severity="error",
                          message="'{INH}' is not a proper bbclass name")
 
diff --git a/oelint_adv/rule_base/rule_vars_listappend.py b/oelint_adv/rule_base/rule_vars_listappend.py
index e92dc76..28b932d 100644
--- a/oelint_adv/rule_base/rule_vars_listappend.py
+++ b/oelint_adv/rule_base/rule_vars_listappend.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarListAppend(Rule):
     def __init__(self):
-        super().__init__(id="oelint.vars.listappend",
+        super(VarListAppend, self).__init__(id="oelint.vars.listappend",
                          severity="error",
                          message="<FOO>")
 
diff --git a/oelint_adv/rule_base/rule_vars_mandatory_exists.py b/oelint_adv/rule_base/rule_vars_mandatory_exists.py
index 014d1ed..810558a 100644
--- a/oelint_adv/rule_base/rule_vars_mandatory_exists.py
+++ b/oelint_adv/rule_base/rule_vars_mandatory_exists.py
@@ -7,7 +7,7 @@ from oelint_parser.helper_files import is_packagegroup
 
 class VarMandatoryExists(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.mandatoryvar",
+        super(VarMandatoryExists, self).__init__(id="oelint.var.mandatoryvar",
                          severity="error",
                          message="<FOO>",
                          onappend=False,
diff --git a/oelint_adv/rule_base/rule_vars_multiinclude.py b/oelint_adv/rule_base/rule_vars_multiinclude.py
index cc1fe4c..0be40d6 100644
--- a/oelint_adv/rule_base/rule_vars_multiinclude.py
+++ b/oelint_adv/rule_base/rule_vars_multiinclude.py
@@ -6,7 +6,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarMultiInclude(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.multiinclude",
+        super(VarMultiInclude, self).__init__(id="oelint.var.multiinclude",
                          severity="warning",
                          message="'{INC}' is included multiple times")
 
diff --git a/oelint_adv/rule_base/rule_vars_multiinherit.py b/oelint_adv/rule_base/rule_vars_multiinherit.py
index 2baa867..24c7d98 100644
--- a/oelint_adv/rule_base/rule_vars_multiinherit.py
+++ b/oelint_adv/rule_base/rule_vars_multiinherit.py
@@ -6,7 +6,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarMultiInherit(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.multiinherit",
+        super(VarMultiInherit, self).__init__(id="oelint.var.multiinherit",
                          severity="warning",
                          message="'{INH}' is included multiple times")
 
diff --git a/oelint_adv/rule_base/rule_vars_native_filename.py b/oelint_adv/rule_base/rule_vars_native_filename.py
index c270678..735a17c 100644
--- a/oelint_adv/rule_base/rule_vars_native_filename.py
+++ b/oelint_adv/rule_base/rule_vars_native_filename.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarNativeFilename(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.nativefilename",
+        super(VarNativeFilename, self).__init__(id="oelint.var.nativefilename",
                          severity="warning",
                          message="native-recipe-files should include '-native' in file name")
 
diff --git a/oelint_adv/rule_base/rule_vars_order.py b/oelint_adv/rule_base/rule_vars_order.py
index 8e94ab9..010f824 100644
--- a/oelint_adv/rule_base/rule_vars_order.py
+++ b/oelint_adv/rule_base/rule_vars_order.py
@@ -5,7 +5,7 @@ from oelint_parser.constants import CONSTANTS
 
 class VarsOrder(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.order",
+        super(VarsOrder, self).__init__(id="oelint.var.order",
                          severity="warning",
                          message="<FOO>",
                          appendix=[self.__cleanname(x) for x in CONSTANTS.VariablesOrder])
diff --git a/oelint_adv/rule_base/rule_vars_pathhardcode.py b/oelint_adv/rule_base/rule_vars_pathhardcode.py
index a351cec..88daf88 100644
--- a/oelint_adv/rule_base/rule_vars_pathhardcode.py
+++ b/oelint_adv/rule_base/rule_vars_pathhardcode.py
@@ -25,7 +25,7 @@ class VarsPathHardcode(Rule):
             "/com": "${sharedstatedir}",
             "/etc": "${sysconfdir}",
         })
-        super().__init__(id="oelint.vars.pathhardcode",
+        super(VarsPathHardcode, self).__init__(id="oelint.vars.pathhardcode",
                          severity="warning",
                          message="<FOO>",
                          appendix=[v.strip("$").strip("{").strip("}") for v in self._map.values()])
diff --git a/oelint_adv/rule_base/rule_vars_suggested.py b/oelint_adv/rule_base/rule_vars_suggested.py
index f240934..fdc3fd6 100644
--- a/oelint_adv/rule_base/rule_vars_suggested.py
+++ b/oelint_adv/rule_base/rule_vars_suggested.py
@@ -5,7 +5,7 @@ from oelint_parser.constants import CONSTANTS
 
 class VarSuggestedExists(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.suggestedvar",
+        super(VarSuggestedExists, self).__init__(id="oelint.var.suggestedvar",
                          severity="info",
                          message="<FOO>",
                          onappend=False,
diff --git a/oelint_adv/rule_base/rule_vars_variable_override.py b/oelint_adv/rule_base/rule_vars_variable_override.py
index dda0c8a..efb48b4 100644
--- a/oelint_adv/rule_base/rule_vars_variable_override.py
+++ b/oelint_adv/rule_base/rule_vars_variable_override.py
@@ -6,7 +6,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarOverride(Rule):
     def __init__(self):
-        super().__init__(id="oelint.var.override",
+        super(VarOverride, self).__init__(id="oelint.var.override",
                          severity="error",
                          message="<FOO>")
 
diff --git a/oelint_adv/rule_jetm/rule_var_depends_singleline.py b/oelint_adv/rule_jetm/rule_var_depends_singleline.py
index 563169e..f1251d8 100644
--- a/oelint_adv/rule_jetm/rule_var_depends_singleline.py
+++ b/oelint_adv/rule_jetm/rule_var_depends_singleline.py
@@ -6,7 +6,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarDependsSingleLine(Rule):
     def __init__(self):
-        super().__init__(id="oelint.jetm.vars.dependssingleline",
+        super(VarDependsSingleLine, self).__init__(id="oelint.jetm.vars.dependssingleline",
                          severity="warning",
                          message="Each [R]DEPENDS entry should be put into a single line")
 
diff --git a/requirements.txt b/requirements.txt
index ca5c3ad..c0dcc51 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,4 +1,2 @@
-urllib3>=1.21.1, <3.0.0
 anytree>=2.7.0, <4.0.0
 colorama>=0.4.3, <2.0.0
-oelint-parser>=1.1.1, <2.0.0
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 5b26ac9..c3151f7 100644
--- a/setup.py
+++ b/setup.py
@@ -7,7 +7,7 @@ try:
     _long_description = subprocess.check_output(
         ["pandoc", "--from", "markdown", "--to", "markdown", "README.md"]).decode("utf-8")
     _long_description_content_type = "text/markdown"
-except (subprocess.CalledProcessError, FileNotFoundError):
+except (subprocess.CalledProcessError, IOError, OSError):
     pass
 
 requirements = []
diff --git a/testruleset/rule_additonal.py b/testruleset/rule_additonal.py
index 0297e2d..6a315d6 100644
--- a/testruleset/rule_additonal.py
+++ b/testruleset/rule_additonal.py
@@ -3,7 +3,7 @@ from oelint_adv.cls_rule import Rule
 
 class FooMagicRule(Rule):
     def __init__(self):
-        super().__init__(id="foocorp.foo.magic",
+        super(FooMagicRule, self).__init__(id="foocorp.foo.magic",
                          severity="error",
                          message="Too much foo happening here")
 
