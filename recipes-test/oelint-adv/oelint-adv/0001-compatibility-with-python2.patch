diff --git a/docs/rule_example.py b/docs/rule_example.py
index 01ba3c4..45bffd9 100644
--- a/docs/rule_example.py
+++ b/docs/rule_example.py
@@ -3,7 +3,7 @@ from oelint_adv.cls_rule import Rule
 
 class FooMagicRule(Rule):
     def __init__(self):
-        super().__init__(id='foocorp.foo.magic',
+        super(FooMagicRule, self).__init__(id='foocorp.foo.magic',
                          severity='error',
                          message='Too much foo happening here')
 
diff --git a/oelint_adv/__main__.py b/oelint_adv/__main__.py
index 14ccbb2..a1f189f 100644
--- a/oelint_adv/__main__.py
+++ b/oelint_adv/__main__.py
@@ -3,10 +3,17 @@ import json
 import os
 import re
 import sys
-from configparser import ConfigParser
-from configparser import NoOptionError
-from configparser import NoSectionError
-from configparser import ParsingError
+
+try:
+    from configparser import ConfigParser
+    from configparser import NoOptionError
+    from configparser import NoSectionError
+    from configparser import ParsingError
+except ImportError:
+    from ConfigParser import ConfigParser
+    from ConfigParser import NoOptionError
+    from ConfigParser import NoSectionError
+    from ConfigParser import ParsingError
 
 from oelint_parser.cls_stash import Stash
 from oelint_parser.constants import CONSTANTS
@@ -44,9 +51,9 @@ def parse_configfile():
             config.read(conffile)
             return {k.replace('-', '_'): v for k, v in config.items('oelint')}
         except (PermissionError, SystemError) as e:  # pragma: no cover
-            print(f'Failed to load config file {conffile}. {e!r}')  # noqa: T001 - it's fine here; # pragma: no cover
+            print('Failed to load config file {}. {}'.format(conffile, repr(e)))  # noqa: T001 - it's fine here; # pragma: no cover
         except (NoSectionError, NoOptionError, ParsingError) as e:
-            print(f'Failed parsing config file {conffile}. {e!r}')  # noqa: T001 - it's here for a reason
+            print('Failed parsing config file {}. {}'.format(conffile, repr(e)))  # noqa: T001 - it's here for a reason
     return {}
 
 
@@ -143,7 +150,7 @@ def arguments_post(args):  # noqa: C901 - complexity is still okay
         try:
             with open(args.rulefile) as i:
                 set_rulefile(json.load(i))
-        except (FileNotFoundError, json.JSONDecodeError):
+        except (IOError, OSError, json.JSONDecodeError):
             raise argparse.ArgumentTypeError(
                 '\'rulefile\' is not a valid file')
 
@@ -151,7 +158,7 @@ def arguments_post(args):  # noqa: C901 - complexity is still okay
         try:
             with open(args.constantfile) as i:
                 CONSTANTS.AddFromConstantFile(json.load(i))
-        except (FileNotFoundError, json.JSONDecodeError):
+        except (IOError, OSError, json.JSONDecodeError):
             raise argparse.ArgumentTypeError(
                 '\'constantfile\' is not a valid file')
 
@@ -165,7 +172,7 @@ def arguments_post(args):  # noqa: C901 - complexity is still okay
                 CONSTANTS.RemoveConstants(_cnt)
             else:
                 CONSTANTS.OverrideConstants(_cnt)
-        except (FileNotFoundError, json.JSONDecodeError):
+        except (IOError, OSError, json.JSONDecodeError):
             raise argparse.ArgumentTypeError(
                 'mod file \'{file}\' is not a valid file'.format(file=mod))
 
@@ -252,7 +259,7 @@ def run(args):
             for f in group:
                 try:
                     stash.AddFile(f)
-                except FileNotFoundError as e:  # pragma: no cover
+                except (IOError, OSError) as e: # pragma: no cover
                     if not args.quiet:  # pragma: no cover
                         print('Can\'t open/read: {e}'.format(e=e))  # noqa: T001 - it's fine here; # pragma: no cover
 
diff --git a/oelint_adv/cls_rule.py b/oelint_adv/cls_rule.py
index dcae47d..0d5f1b3 100644
--- a/oelint_adv/cls_rule.py
+++ b/oelint_adv/cls_rule.py
@@ -16,7 +16,7 @@ from oelint_adv.rule_file import get_rulefile
 from oelint_adv.rule_file import get_suppressions
 
 
-class Rule:
+class Rule(object):
     def __init__(self, id='', severity='', message='', onappend=True, onlyappend=False, appendix=()):
         """constructor
 
@@ -112,7 +112,7 @@ class Rule:
         _msg = get_messageformat().format(path=_path, line=_line, severity=_severity,
                                           id=_display_id, msg=override_msg)
 
-        return [(_line, f'{_color}{_msg}{_style}')]
+        return [(_line, '{}{}{}'.format(_color, _msg, _style))]
 
     def __repr__(self):
         return '{id}'.format(id=self.ID)  # pragma: no cover
@@ -129,7 +129,7 @@ class Rule:
         _rule_file = get_rulefile()
         if not _rule_file:
             return self.Severity
-        _subid = None if appendix is None else f'{self.ID}.{appendix}'
+        _subid = None if appendix is None else '{}.{}'.format(self.ID, appendix)
         if _subid and _subid in _rule_file:
             _severity = _rule_file[_subid]
         elif self.ID in _rule_file:
@@ -154,10 +154,10 @@ class Rule:
         Returns:
             dict -- list of rulefile entries
         """
-        return {
-            **({} if self.get_severity() is None else {self.ID: self.get_severity()}),
-            **{f'{self.ID}.{x}': self.get_severity(x) for x in self.Appendix if self.get_severity(x) is not None},
-        }
+        return dict(
+            list(({} if self.get_severity() is None else {self.ID: self.get_severity()}).items()) + list(
+                {'{}.{}'.format(self.ID, x): self.get_severity(x) for x in self.Appendix if self.get_severity(x) is not None}.items())
+        )
 
     def format_message(self, *args, **kwargs):
         """Format message
diff --git a/oelint_adv/color.py b/oelint_adv/color.py
index 1252486..005b883 100644
--- a/oelint_adv/color.py
+++ b/oelint_adv/color.py
@@ -9,18 +9,18 @@ _COLORS_BY_SEVERITY = {
 }
 
 
-def get_colorize() -> bool:
+def get_colorize(): # type: () -> bool
     """Returns weather or not the terminal output is to be colorized"""
     return _COLOR
 
 
-def set_colorize(value: bool) -> None:
+def set_colorize(value): # type: (bool) -> None
     """Globally turn colored terminal output on/off"""
     global _COLOR
     _COLOR = value
 
 
-def get_color_by_severity(severity: str) -> AnsiCodes:
+def get_color_by_severity(severity): # type: (str) -> AnsiCodes
     """Get an ANSI color code given a severity
 
     Args:
diff --git a/oelint_adv/rule_base/rule_append_protvars.py b/oelint_adv/rule_base/rule_append_protvars.py
index 276dbd4..5c3c1e8 100644
--- a/oelint_adv/rule_base/rule_append_protvars.py
+++ b/oelint_adv/rule_base/rule_append_protvars.py
@@ -5,7 +5,7 @@ from oelint_parser.constants import CONSTANTS
 
 class VarQuoted(Rule):
     def __init__(self):
-        super().__init__(id='oelint.append.protvars',
+        super(VarQuoted, self).__init__(id='oelint.append.protvars',
                          severity='error',
                          message='Variable \'{VAR}\' shouldn\'t be set as part of a bbappend',
                          onlyappend=True,
diff --git a/oelint_adv/rule_base/rule_file_include.py b/oelint_adv/rule_base/rule_file_include.py
index f3426ff..120d041 100644
--- a/oelint_adv/rule_base/rule_file_include.py
+++ b/oelint_adv/rule_base/rule_file_include.py
@@ -8,7 +8,7 @@ from oelint_parser.helper_files import find_local_or_in_layer
 
 class FileIncludeNotFound(Rule):
     def __init__(self):
-        super().__init__(id='oelint.file.includenotfound',
+        super(FileIncludeNotFound, self).__init__(id='oelint.file.includenotfound',
                          severity='warning',
                          message='\'{FILE}\' was not found')
 
diff --git a/oelint_adv/rule_base/rule_file_includevsrequire.py b/oelint_adv/rule_base/rule_file_includevsrequire.py
index 8b9feab..85f9018 100644
--- a/oelint_adv/rule_base/rule_file_includevsrequire.py
+++ b/oelint_adv/rule_base/rule_file_includevsrequire.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Include
 
 class FileIncludeVsRequire(Rule):
     def __init__(self):
-        super().__init__(id='oelint.file.requireinclude',
+        super(FileIncludeVsRequire, self).__init__(id='oelint.file.requireinclude',
                          severity='warning',
                          message='Use \'require {FILE}\' instead of \'include {FILE}\'')
 
diff --git a/oelint_adv/rule_base/rule_file_nospaces.py b/oelint_adv/rule_base/rule_file_nospaces.py
index 07d6fd0..b13b682 100644
--- a/oelint_adv/rule_base/rule_file_nospaces.py
+++ b/oelint_adv/rule_base/rule_file_nospaces.py
@@ -4,7 +4,7 @@ from oelint_parser.helper_files import get_layer_root
 
 class FileNoSpaces(Rule):
     def __init__(self):
-        super().__init__(id='oelint.file.nospaces',
+        super(FileNoSpaces, self).__init__(id='oelint.file.nospaces',
                          severity='error',
                          message='Path to file contains spaces. Please remove them')
 
diff --git a/oelint_adv/rule_base/rule_file_patch_inappropriatemsg.py b/oelint_adv/rule_base/rule_file_patch_inappropriatemsg.py
index 39be4f7..9ee0e7f 100644
--- a/oelint_adv/rule_base/rule_file_patch_inappropriatemsg.py
+++ b/oelint_adv/rule_base/rule_file_patch_inappropriatemsg.py
@@ -8,7 +8,7 @@ from oelint_parser.helper_files import get_files
 
 class FilePatchIsUpstreamStatusInAppMsg(Rule):
     def __init__(self):
-        super().__init__(id='oelint.file.inappropriatemsg',
+        super(FilePatchIsUpstreamStatusInAppMsg, self).__init__(id='oelint.file.inappropriatemsg',
                          severity='info',
                          message='Patch \'{FILE}\' with Upstream-Status Inappropriate has to have a reasoning appended in [], chosen from {choices}')
 
diff --git a/oelint_adv/rule_base/rule_file_patch_signedoff.py b/oelint_adv/rule_base/rule_file_patch_signedoff.py
index d96167f..5c2788e 100644
--- a/oelint_adv/rule_base/rule_file_patch_signedoff.py
+++ b/oelint_adv/rule_base/rule_file_patch_signedoff.py
@@ -7,7 +7,7 @@ from oelint_parser.helper_files import get_files
 
 class FilePatchIsSignedOff(Rule):
     def __init__(self):
-        super().__init__(id='oelint.file.patchsignedoff',
+        super(FilePatchIsSignedOff, self).__init__(id='oelint.file.patchsignedoff',
                          severity='warning',
                          message='Patch \'{FILE}\' should contain a Signed-off-by entry')
 
diff --git a/oelint_adv/rule_base/rule_file_patch_upstreamstatus.py b/oelint_adv/rule_base/rule_file_patch_upstreamstatus.py
index 2e32120..18eb1ef 100644
--- a/oelint_adv/rule_base/rule_file_patch_upstreamstatus.py
+++ b/oelint_adv/rule_base/rule_file_patch_upstreamstatus.py
@@ -8,7 +8,7 @@ from oelint_parser.helper_files import get_files
 
 class FilePatchIsUpstreamStatus(Rule):
     def __init__(self):
-        super().__init__(id='oelint.file.upstreamstatus',
+        super(FilePatchIsUpstreamStatus, self).__init__(id='oelint.file.upstreamstatus',
                          severity='info',
                          message='Patch \'{FILE}\' should contain an Upstream-Status entry')
 
diff --git a/oelint_adv/rule_base/rule_file_require.py b/oelint_adv/rule_base/rule_file_require.py
index 201fc0f..36cd1fa 100644
--- a/oelint_adv/rule_base/rule_file_require.py
+++ b/oelint_adv/rule_base/rule_file_require.py
@@ -8,7 +8,7 @@ from oelint_parser.helper_files import find_local_or_in_layer
 
 class FileRequireNotFound(Rule):
     def __init__(self):
-        super().__init__(id='oelint.file.requirenotfound',
+        super(FileRequireNotFound, self).__init__(id='oelint.file.requirenotfound',
                          severity='error',
                          message='\'{FILE}\' was not found')
 
diff --git a/oelint_adv/rule_base/rule_file_underscores.py b/oelint_adv/rule_base/rule_file_underscores.py
index 4ac097b..7c7ab85 100644
--- a/oelint_adv/rule_base/rule_file_underscores.py
+++ b/oelint_adv/rule_base/rule_file_underscores.py
@@ -7,7 +7,7 @@ from oelint_parser.cls_item import Variable
 
 class FileNoSpaces(Rule):
     def __init__(self):
-        super().__init__(id='oelint.file.underscores',
+        super(FileNoSpaces, self).__init__(id='oelint.file.underscores',
                          severity='error',
                          message='FOO',
                          onappend=False)
diff --git a/oelint_adv/rule_base/rule_func_spec.py b/oelint_adv/rule_base/rule_func_spec.py
index f550ec0..a11afcb 100644
--- a/oelint_adv/rule_base/rule_func_spec.py
+++ b/oelint_adv/rule_base/rule_func_spec.py
@@ -10,7 +10,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarPnBpnUsage(Rule):
     def __init__(self):
-        super().__init__(id='oelint.func.specific',
+        super(VarPnBpnUsage, self).__init__(id='oelint.func.specific',
                          severity='error',
                          message='\'{func}\' is set specific to [\'{machine}\'] or [\'{distro}\'], but isn\'t known from PACKAGES, MACHINE, DISTRO, or resources')
 
diff --git a/oelint_adv/rule_base/rule_newline_consecutive.py b/oelint_adv/rule_base/rule_newline_consecutive.py
index 6f10798..0af2adf 100644
--- a/oelint_adv/rule_base/rule_newline_consecutive.py
+++ b/oelint_adv/rule_base/rule_newline_consecutive.py
@@ -3,7 +3,7 @@ from oelint_adv.cls_rule import Rule
 
 class NewLineConsecutive(Rule):
     def __init__(self):
-        super().__init__(id='oelint.newline.consecutive',
+        super(NewLineConsecutive, self).__init__(id='oelint.newline.consecutive',
                          severity='warning',
                          message='Consecutive blank lines should be avoided')
 
diff --git a/oelint_adv/rule_base/rule_newline_end.py b/oelint_adv/rule_base/rule_newline_end.py
index 57fe1ec..2e4ca8f 100644
--- a/oelint_adv/rule_base/rule_newline_end.py
+++ b/oelint_adv/rule_base/rule_newline_end.py
@@ -3,7 +3,7 @@ from oelint_adv.cls_rule import Rule
 
 class NewLineEOF(Rule):
     def __init__(self):
-        super().__init__(id='oelint.newline.eof',
+        super(NewLineEOF, self).__init__(id='oelint.newline.eof',
                          severity='warning',
                          message='File shall end on a newline')
 
diff --git a/oelint_adv/rule_base/rule_nospace_line_begin.py b/oelint_adv/rule_base/rule_nospace_line_begin.py
index dc1dbcf..9c04e54 100644
--- a/oelint_adv/rule_base/rule_nospace_line_begin.py
+++ b/oelint_adv/rule_base/rule_nospace_line_begin.py
@@ -5,7 +5,7 @@ from oelint_parser.cls_item import PythonBlock
 
 class NoSpaceBeginningRule(Rule):
     def __init__(self):
-        super().__init__(id='oelint.spaces.linebeginning',
+        super(NoSpaceBeginningRule, self).__init__(id='oelint.spaces.linebeginning',
                          severity='warning',
                          message='Line shall not begin with a space')
 
diff --git a/oelint_adv/rule_base/rule_nospace_line_cont.py b/oelint_adv/rule_base/rule_nospace_line_cont.py
index b7b2e6a..e798b43 100644
--- a/oelint_adv/rule_base/rule_nospace_line_cont.py
+++ b/oelint_adv/rule_base/rule_nospace_line_cont.py
@@ -6,7 +6,7 @@ from oelint_parser.cls_item import Comment
 
 class NoSpaceRuleCont(Rule):
     def __init__(self):
-        super().__init__(id='oelint.spaces.linecont',
+        super(NoSpaceRuleCont, self).__init__(id='oelint.spaces.linecont',
                          severity='error',
                          message='No spaces after line continuation')
 
diff --git a/oelint_adv/rule_base/rule_nospace_line_empty.py b/oelint_adv/rule_base/rule_nospace_line_empty.py
index 1806582..85be150 100644
--- a/oelint_adv/rule_base/rule_nospace_line_empty.py
+++ b/oelint_adv/rule_base/rule_nospace_line_empty.py
@@ -3,7 +3,7 @@ from oelint_adv.cls_rule import Rule
 
 class NoSpaceEmptyLineRule(Rule):
     def __init__(self):
-        super().__init__(id='oelint.spaces.emptyline',
+        super(NoSpaceEmptyLineRule, self).__init__(id='oelint.spaces.emptyline',
                          severity='warning',
                          message='Empty lines shall not contain spaces')
 
diff --git a/oelint_adv/rule_base/rule_nospace_line_end.py b/oelint_adv/rule_base/rule_nospace_line_end.py
index c80d2d5..e2f2839 100644
--- a/oelint_adv/rule_base/rule_nospace_line_end.py
+++ b/oelint_adv/rule_base/rule_nospace_line_end.py
@@ -5,7 +5,7 @@ from oelint_adv.cls_rule import Rule
 
 class NoSpaceTrailingRule(Rule):
     def __init__(self):
-        super().__init__(id='oelint.spaces.lineend',
+        super(NoSpaceTrailingRule, self).__init__(id='oelint.spaces.lineend',
                          severity='warning',
                          message='Line shall not end with a space')
 
diff --git a/oelint_adv/rule_base/rule_notabs.py b/oelint_adv/rule_base/rule_notabs.py
index 6f5f271..3defbd2 100644
--- a/oelint_adv/rule_base/rule_notabs.py
+++ b/oelint_adv/rule_base/rule_notabs.py
@@ -5,7 +5,7 @@ from oelint_adv.cls_rule import Rule
 
 class NoTabs(Rule):
     def __init__(self):
-        super().__init__(id='oelint.tabs.notabs',
+        super(NoTabs, self).__init__(id='oelint.tabs.notabs',
                          severity='warning',
                          message='Don\'t use tabs use spaces')
 
diff --git a/oelint_adv/rule_base/rule_tasks_addnotaskbody.py b/oelint_adv/rule_base/rule_tasks_addnotaskbody.py
index a5c8d72..c8c00ae 100644
--- a/oelint_adv/rule_base/rule_tasks_addnotaskbody.py
+++ b/oelint_adv/rule_base/rule_tasks_addnotaskbody.py
@@ -6,7 +6,7 @@ from oelint_parser.constants import CONSTANTS
 
 class TaskAddNoTaskBody(Rule):
     def __init__(self):
-        super().__init__(id='oelint.task.addnotaskbody',
+        super(TaskAddNoTaskBody, self).__init__(id='oelint.task.addnotaskbody',
                          severity='warning',
                          message='The added task \'{FUNC}\' is not existing or has no body')
 
diff --git a/oelint_adv/rule_base/rule_tasks_anon_python.py b/oelint_adv/rule_base/rule_tasks_anon_python.py
index 2486727..d6ebc29 100644
--- a/oelint_adv/rule_base/rule_tasks_anon_python.py
+++ b/oelint_adv/rule_base/rule_tasks_anon_python.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskNoAnonPython(Rule):
     def __init__(self):
-        super().__init__(id='oelint.task.noanonpython',
+        super(TaskNoAnonPython, self).__init__(id='oelint.task.noanonpython',
                          severity='warning',
                          message='Avoid anonymous python functions as they expensive and come with all sorts of side effects')
 
diff --git a/oelint_adv/rule_base/rule_tasks_customorder.py b/oelint_adv/rule_base/rule_tasks_customorder.py
index 3237556..2e1695a 100644
--- a/oelint_adv/rule_base/rule_tasks_customorder.py
+++ b/oelint_adv/rule_base/rule_tasks_customorder.py
@@ -8,7 +8,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskCustomOrder(Rule):
     def __init__(self):
-        super().__init__(id='oelint.task.customorder',
+        super(TaskCustomOrder, self).__init__(id='oelint.task.customorder',
                          severity='error',
                          message='<FOO>')
 
diff --git a/oelint_adv/rule_base/rule_tasks_doc_strings.py b/oelint_adv/rule_base/rule_tasks_doc_strings.py
index f9de503..cb004f2 100644
--- a/oelint_adv/rule_base/rule_tasks_doc_strings.py
+++ b/oelint_adv/rule_base/rule_tasks_doc_strings.py
@@ -6,7 +6,7 @@ from oelint_parser.constants import CONSTANTS
 
 class TaskDocStrings(Rule):
     def __init__(self):
-        super().__init__(id='oelint.task.docstrings',
+        super(TaskDocStrings, self).__init__(id='oelint.task.docstrings',
                          severity='info',
                          message='Every custom task should have a doc string set by task[doc] = \'\'')
 
diff --git a/oelint_adv/rule_base/rule_tasks_heredocs.py b/oelint_adv/rule_base/rule_tasks_heredocs.py
index 567ba31..8d8dc09 100644
--- a/oelint_adv/rule_base/rule_tasks_heredocs.py
+++ b/oelint_adv/rule_base/rule_tasks_heredocs.py
@@ -5,7 +5,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskInstallNoCp(Rule):
     def __init__(self):
-        super().__init__(id='oelint.task.heredocs',
+        super(TaskInstallNoCp, self).__init__(id='oelint.task.heredocs',
                          severity='warning',
                          message='Usage of heredocs should be avoided. Use files instead')
 
diff --git a/oelint_adv/rule_base/rule_tasks_multiappends.py b/oelint_adv/rule_base/rule_tasks_multiappends.py
index 33b7f7f..32bc7d6 100644
--- a/oelint_adv/rule_base/rule_tasks_multiappends.py
+++ b/oelint_adv/rule_base/rule_tasks_multiappends.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Function
 
 class TaskMultiFragments(Rule):
     def __init__(self):
-        super().__init__(id='oelint.task.multifragments',
+        super(TaskMultiFragments, self).__init__(id='oelint.task.multifragments',
                          severity='info',
                          message='Multiple fragments of the same function in the same file should be merged')
 
diff --git a/oelint_adv/rule_base/rule_tasks_no_cp.py b/oelint_adv/rule_base/rule_tasks_no_cp.py
index a9b7e62..0955f8b 100644
--- a/oelint_adv/rule_base/rule_tasks_no_cp.py
+++ b/oelint_adv/rule_base/rule_tasks_no_cp.py
@@ -5,7 +5,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskInstallNoCp(Rule):
     def __init__(self):
-        super().__init__(id='oelint.task.nocopy',
+        super(TaskInstallNoCp, self).__init__(id='oelint.task.nocopy',
                          severity='error',
                          message='\'cp\' shall not be used in do_install. Use \'install\'')
 
diff --git a/oelint_adv/rule_base/rule_tasks_no_mkdir.py b/oelint_adv/rule_base/rule_tasks_no_mkdir.py
index e3600b9..5dbf4e9 100644
--- a/oelint_adv/rule_base/rule_tasks_no_mkdir.py
+++ b/oelint_adv/rule_base/rule_tasks_no_mkdir.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class TaskInstallNoMkdir(Rule):
     def __init__(self):
-        super().__init__(id='oelint.task.nomkdir',
+        super(TaskInstallNoMkdir, self).__init__(id='oelint.task.nomkdir',
                          severity='error',
                          message='\'mkdir\' shall not be used in do_install. Use \'install\'')
 
diff --git a/oelint_adv/rule_base/rule_tasks_nopython_prefix.py b/oelint_adv/rule_base/rule_tasks_nopython_prefix.py
index c030982..4d11491 100644
--- a/oelint_adv/rule_base/rule_tasks_nopython_prefix.py
+++ b/oelint_adv/rule_base/rule_tasks_nopython_prefix.py
@@ -6,7 +6,7 @@ from oelint_parser.cls_item import Function
 
 class TaskNoPythonPrefix(Rule):
     def __init__(self):
-        super().__init__(id='oelint.task.nopythonprefix',
+        super(TaskNoPythonPrefix, self).__init__(id='oelint.task.nopythonprefix',
                          severity='warning',
                          message='Tasks containing shell code, should not be prefixed with python in function header')
 
diff --git a/oelint_adv/rule_base/rule_tasks_order.py b/oelint_adv/rule_base/rule_tasks_order.py
index 00d7b00..de0d69f 100644
--- a/oelint_adv/rule_base/rule_tasks_order.py
+++ b/oelint_adv/rule_base/rule_tasks_order.py
@@ -5,7 +5,7 @@ from oelint_parser.constants import CONSTANTS
 
 class TaskOrder(Rule):
     def __init__(self):
-        super().__init__(id='oelint.task.order',
+        super(TaskOrder, self).__init__(id='oelint.task.order',
                          severity='warning',
                          message='<FOO>',
                          appendix=CONSTANTS.FunctionsOrder)
diff --git a/oelint_adv/rule_base/rule_tasks_python_prefix.py b/oelint_adv/rule_base/rule_tasks_python_prefix.py
index 6990c27..fa62569 100644
--- a/oelint_adv/rule_base/rule_tasks_python_prefix.py
+++ b/oelint_adv/rule_base/rule_tasks_python_prefix.py
@@ -6,7 +6,7 @@ from oelint_parser.cls_item import Function
 
 class TaskPythonPrefix(Rule):
     def __init__(self):
-        super().__init__(id='oelint.task.pythonprefix',
+        super(TaskPythonPrefix, self).__init__(id='oelint.task.pythonprefix',
                          severity='warning',
                          message='Tasks containing python code, should be prefixed with python in function header')
 
diff --git a/oelint_adv/rule_base/rule_var_appendop.py b/oelint_adv/rule_base/rule_var_appendop.py
index 1d57df1..97a4cf5 100644
--- a/oelint_adv/rule_base/rule_var_appendop.py
+++ b/oelint_adv/rule_base/rule_var_appendop.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarAppendOperation(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.appendop',
+        super(VarAppendOperation, self).__init__(id='oelint.vars.appendop',
                          severity='error',
                          message='Use \'{a}\' instead of \'{b}\' as it overwrites \'{c}\'')
 
diff --git a/oelint_adv/rule_base/rule_var_autorev.py b/oelint_adv/rule_base/rule_var_autorev.py
index d064899..ea99886 100644
--- a/oelint_adv/rule_base/rule_var_autorev.py
+++ b/oelint_adv/rule_base/rule_var_autorev.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarAutorev(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.autorev',
+        super(VarAutorev, self).__init__(id='oelint.vars.autorev',
                          severity='warning',
                          message='The usage of \'AUTOREV\' for SRCREV leads to not reproducible builds')
 
diff --git a/oelint_adv/rule_base/rule_var_bbvars.py b/oelint_adv/rule_base/rule_var_bbvars.py
index ba84d65..5b073cf 100644
--- a/oelint_adv/rule_base/rule_var_bbvars.py
+++ b/oelint_adv/rule_base/rule_var_bbvars.py
@@ -5,7 +5,7 @@ from oelint_parser.constants import CONSTANTS
 
 class VarQuoted(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.bbvars',
+        super(VarQuoted, self).__init__(id='oelint.vars.bbvars',
                          severity='warning',
                          message='Variable \'{VAR}\' should be set on a disto/layer or local.conf level, not in a recipe',
                          appendix=CONSTANTS.VariablesProtected)
diff --git a/oelint_adv/rule_base/rule_var_bugtracker_url.py b/oelint_adv/rule_base/rule_var_bugtracker_url.py
index 45450ef..4af33b2 100644
--- a/oelint_adv/rule_base/rule_var_bugtracker_url.py
+++ b/oelint_adv/rule_base/rule_var_bugtracker_url.py
@@ -5,7 +5,7 @@ from oelint_parser.helper_files import get_scr_components
 
 class VarBugtrackerIsUrl(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.bugtrackerisurl',
+        super(VarBugtrackerIsUrl, self).__init__(id='oelint.vars.bugtrackerisurl',
                          severity='warning',
                          message='\'BUGTRACKER\' should be an URL')
 
diff --git a/oelint_adv/rule_base/rule_var_depends_append.py b/oelint_adv/rule_base/rule_var_depends_append.py
index a6d4e3b..92ff427 100644
--- a/oelint_adv/rule_base/rule_var_depends_append.py
+++ b/oelint_adv/rule_base/rule_var_depends_append.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarDependsAppend(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.dependsappend',
+        super(VarDependsAppend, self).__init__(id='oelint.vars.dependsappend',
                          severity='error',
                          message='DEPENDS should only be appended, not overwritten')
 
diff --git a/oelint_adv/rule_base/rule_var_depends_ordered.py b/oelint_adv/rule_base/rule_var_depends_ordered.py
index 24f000a..dc4fb8e 100644
--- a/oelint_adv/rule_base/rule_var_depends_ordered.py
+++ b/oelint_adv/rule_base/rule_var_depends_ordered.py
@@ -7,7 +7,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarDependsOrdered(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.dependsordered',
+        super(VarDependsOrdered, self).__init__(id='oelint.vars.dependsordered',
                          severity='warning',
                          message='\'{VAR}\' entries should be ordered alphabetically')
 
diff --git a/oelint_adv/rule_base/rule_var_descriptionsame.py b/oelint_adv/rule_base/rule_var_descriptionsame.py
index 4291911..f4d83ef 100644
--- a/oelint_adv/rule_base/rule_var_descriptionsame.py
+++ b/oelint_adv/rule_base/rule_var_descriptionsame.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarDescSame(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.descriptionsame',
+        super(VarDescSame, self).__init__(id='oelint.vars.descriptionsame',
                          severity='warning',
                          message='\'DESCRIPTION\' is the same a \'SUMMARY\' - it can be removed then')
 
diff --git a/oelint_adv/rule_base/rule_var_descriptiontooshort.py b/oelint_adv/rule_base/rule_var_descriptiontooshort.py
index 450b1a4..0b0be53 100644
--- a/oelint_adv/rule_base/rule_var_descriptiontooshort.py
+++ b/oelint_adv/rule_base/rule_var_descriptiontooshort.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarDescSameTooBrief(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.descriptiontoobrief',
+        super(VarDescSameTooBrief, self).__init__(id='oelint.vars.descriptiontoobrief',
                          severity='warning',
                          message='\'DESCRIPTION\' is the shorter than \'SUMMARY\'')
 
diff --git a/oelint_adv/rule_base/rule_var_doublemodify.py b/oelint_adv/rule_base/rule_var_doublemodify.py
index d2d15e6..0ca68eb 100644
--- a/oelint_adv/rule_base/rule_var_doublemodify.py
+++ b/oelint_adv/rule_base/rule_var_doublemodify.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSectionLowercase(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.doublemodify',
+        super(VarSectionLowercase, self).__init__(id='oelint.vars.doublemodify',
                          severity='error',
                          message='Multiple modifiers of append/prepend/remove/+= found in one operation')
 
diff --git a/oelint_adv/rule_base/rule_var_duplicates.py b/oelint_adv/rule_base/rule_var_duplicates.py
index 3609400..026714b 100644
--- a/oelint_adv/rule_base/rule_var_duplicates.py
+++ b/oelint_adv/rule_base/rule_var_duplicates.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarDuplicates(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.duplicate',
+        super(VarDuplicates, self).__init__(id='oelint.vars.duplicate',
                          severity='warning',
                          message='<FOO>')
 
diff --git a/oelint_adv/rule_base/rule_var_filesextrapaths.py b/oelint_adv/rule_base/rule_var_filesextrapaths.py
index 114b316..59ad18e 100644
--- a/oelint_adv/rule_base/rule_var_filesextrapaths.py
+++ b/oelint_adv/rule_base/rule_var_filesextrapaths.py
@@ -6,7 +6,7 @@ from oelint_parser.cls_item import Variable
 
 class VarBugtrackerIsUrl(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.fileextrapaths',
+        super(VarBugtrackerIsUrl, self).__init__(id='oelint.vars.fileextrapaths',
                          severity='warning',
                          message='\'FILESEXTRAPATHS\' shouldn\'t be used in a bb file')
 
diff --git a/oelint_adv/rule_base/rule_var_filesextrapathsop.py b/oelint_adv/rule_base/rule_var_filesextrapathsop.py
index 9f4b104..72e4da1 100644
--- a/oelint_adv/rule_base/rule_var_filesextrapathsop.py
+++ b/oelint_adv/rule_base/rule_var_filesextrapathsop.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarBugtrackerIsUrl(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.fileextrapathsop',
+        super(VarBugtrackerIsUrl, self).__init__(id='oelint.vars.fileextrapathsop',
                          severity='error',
                          message='\'FILESEXTRAPATHS\' should only be used in combination with \' := \'')
 
diff --git a/oelint_adv/rule_base/rule_var_filesoverride.py b/oelint_adv/rule_base/rule_var_filesoverride.py
index 5595e9a..1850fd5 100644
--- a/oelint_adv/rule_base/rule_var_filesoverride.py
+++ b/oelint_adv/rule_base/rule_var_filesoverride.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarFilesOverride(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.filesoverride',
+        super(VarFilesOverride, self).__init__(id='oelint.var.filesoverride',
                          severity='warning',
                          message='\'{a}\' should not be overriden')
 
diff --git a/oelint_adv/rule_base/rule_var_homepage.py b/oelint_adv/rule_base/rule_var_homepage.py
index 440df71..7179360 100644
--- a/oelint_adv/rule_base/rule_var_homepage.py
+++ b/oelint_adv/rule_base/rule_var_homepage.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarHomepagePrefix(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.homepageprefix',
+        super(VarHomepagePrefix, self).__init__(id='oelint.vars.homepageprefix',
                          severity='warning',
                          message='\'HOMEPAGE\' should start with \'http://\' or \'https://\'')
 
diff --git a/oelint_adv/rule_base/rule_var_homepageping.py b/oelint_adv/rule_base/rule_var_homepageping.py
index 731a93f..3e40134 100644
--- a/oelint_adv/rule_base/rule_var_homepageping.py
+++ b/oelint_adv/rule_base/rule_var_homepageping.py
@@ -1,7 +1,13 @@
-from urllib.error import HTTPError
-from urllib.error import URLError
-from urllib.request import Request
-from urllib.request import urlopen
+try:
+    from urllib.error import HTTPError
+    from urllib.error import URLError
+    from urllib.request import Request
+    from urllib.request import urlopen
+except ImportError:
+    from urllib2 import HTTPError
+    from urllib2 import URLError
+    from urllib2 import Request
+    from urllib2 import urlopen
 
 from oelint_adv.cls_rule import Rule
 from oelint_parser.cls_item import Variable
@@ -9,7 +15,7 @@ from oelint_parser.cls_item import Variable
 
 class VarHomepagePing(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.homepageping',
+        super(VarHomepagePing, self).__init__(id='oelint.vars.homepageping',
                          severity='warning',
                          message='\'HOMEPAGE\' isn\'t reachable')
 
diff --git a/oelint_adv/rule_base/rule_var_inconsspaces.py b/oelint_adv/rule_base/rule_var_inconsspaces.py
index 3b6fa5b..6ba53b8 100644
--- a/oelint_adv/rule_base/rule_var_inconsspaces.py
+++ b/oelint_adv/rule_base/rule_var_inconsspaces.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarInconSpaces(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.inconspaces',
+        super(VarInconSpaces, self).__init__(id='oelint.vars.inconspaces',
                          severity='error',
                          message='<FOO>')
 
diff --git a/oelint_adv/rule_base/rule_var_insaneskip.py b/oelint_adv/rule_base/rule_var_insaneskip.py
index d9a5ca1..aed3433 100644
--- a/oelint_adv/rule_base/rule_var_insaneskip.py
+++ b/oelint_adv/rule_base/rule_var_insaneskip.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarInsaneSkip(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.insaneskip',
+        super(VarInsaneSkip, self).__init__(id='oelint.vars.insaneskip',
                          severity='error',
                          message='INSANE_SKIP should be avoided at any cost')
 
diff --git a/oelint_adv/rule_base/rule_var_license_remote.py b/oelint_adv/rule_base/rule_var_license_remote.py
index aacd7c2..929ec0a 100644
--- a/oelint_adv/rule_base/rule_var_license_remote.py
+++ b/oelint_adv/rule_base/rule_var_license_remote.py
@@ -6,7 +6,7 @@ from oelint_parser.helper_files import get_scr_components
 
 class VarLicenseRemoteFile(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.licenseremotefile',
+        super(VarLicenseRemoteFile, self).__init__(id='oelint.var.licenseremotefile',
                          severity='warning',
                          message='License-File should be a remote file')
 
diff --git a/oelint_adv/rule_base/rule_var_licfileprefix.py b/oelint_adv/rule_base/rule_var_licfileprefix.py
index b11125c..c7a32ef 100644
--- a/oelint_adv/rule_base/rule_var_licfileprefix.py
+++ b/oelint_adv/rule_base/rule_var_licfileprefix.py
@@ -7,7 +7,7 @@ from oelint_parser.helper_files import get_scr_components
 
 class VarLicFilePrefix(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.licfileprefix',
+        super(VarLicFilePrefix, self).__init__(id='oelint.vars.licfileprefix',
                          severity='warning',
                          message='Prefix \'{PATH}\' to LIC_FILES_CHKSUM is not needed')
 
diff --git a/oelint_adv/rule_base/rule_var_misspell.py b/oelint_adv/rule_base/rule_var_misspell.py
index 975ab5f..b537abd 100644
--- a/oelint_adv/rule_base/rule_var_misspell.py
+++ b/oelint_adv/rule_base/rule_var_misspell.py
@@ -8,7 +8,7 @@ from oelint_parser.helper_files import get_valid_package_names
 
 class VarMisspell(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.mispell',
+        super(VarMisspell, self).__init__(id='oelint.vars.mispell',
                          severity='warning',
                          message='<FOO>')
 
diff --git a/oelint_adv/rule_base/rule_var_multilineindent.py b/oelint_adv/rule_base/rule_var_multilineindent.py
index d1876a5..91a6d0d 100644
--- a/oelint_adv/rule_base/rule_var_multilineindent.py
+++ b/oelint_adv/rule_base/rule_var_multilineindent.py
@@ -6,7 +6,7 @@ from oelint_parser.cls_item import Variable
 
 class VarMultiLineIndent(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.multilineident',
+        super(VarMultiLineIndent, self).__init__(id='oelint.vars.multilineident',
                          severity='info',
                          message='On a multiline assignment, line indent is desirable. {a} set, {b} desirable')
 
diff --git a/oelint_adv/rule_base/rule_var_notneededspace.py b/oelint_adv/rule_base/rule_var_notneededspace.py
index 32bcfa0..ee4a681 100644
--- a/oelint_adv/rule_base/rule_var_notneededspace.py
+++ b/oelint_adv/rule_base/rule_var_notneededspace.py
@@ -6,7 +6,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSectionLowercase(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.notneededspace',
+        super(VarSectionLowercase, self).__init__(id='oelint.vars.notneededspace',
                          severity='info',
                          message='Space at the beginning of the var is not needed')
 
diff --git a/oelint_adv/rule_base/rule_var_p_usage.py b/oelint_adv/rule_base/rule_var_p_usage.py
index a8a1a49..765e889 100644
--- a/oelint_adv/rule_base/rule_var_p_usage.py
+++ b/oelint_adv/rule_base/rule_var_p_usage.py
@@ -5,7 +5,7 @@ from oelint_parser.helper_files import get_scr_components
 
 class VarPnBpnUsage(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.pbpusage',
+        super(VarPnBpnUsage, self).__init__(id='oelint.vars.pbpusage',
                          severity='error',
                          message='${BP} should be used instead of ${P}')
 
diff --git a/oelint_adv/rule_base/rule_var_pkgspecific.py b/oelint_adv/rule_base/rule_var_pkgspecific.py
index b6265c3..01b3157 100644
--- a/oelint_adv/rule_base/rule_var_pkgspecific.py
+++ b/oelint_adv/rule_base/rule_var_pkgspecific.py
@@ -8,7 +8,7 @@ class VarPkgSpecific(Rule):
     def __init__(self):
         self.needles = ['RDEPENDS', 'RRECOMMENDS', 'RSUGGESTS', 'RCONFLICTS', 'RPROVIDES', 'RREPLACES',
                         'FILES', 'pkg_preinst', 'pkg_postinst', 'pkg_prerm', 'pkg_postrm', 'ALLOW_EMPTY']
-        super().__init__(id='oelint.vars.pkgspecific',
+        super(VarPkgSpecific, self).__init__(id='oelint.vars.pkgspecific',
                          severity='error',
                          message='Variable {VAR} is package-specific and therefore it should be {VAR}_${PN} or {VAR}:${PN}',
                          appendix=self.needles)
diff --git a/oelint_adv/rule_base/rule_var_pn_usage.py b/oelint_adv/rule_base/rule_var_pn_usage.py
index e3e2c7c..cc8f8b9 100644
--- a/oelint_adv/rule_base/rule_var_pn_usage.py
+++ b/oelint_adv/rule_base/rule_var_pn_usage.py
@@ -5,7 +5,7 @@ from oelint_parser.helper_files import get_scr_components
 
 class VarPnBpnUsage(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.pnbpnusage',
+        super(VarPnBpnUsage, self).__init__(id='oelint.vars.pnbpnusage',
                          severity='error',
                          message='${BPN} should be used instead of ${PN}')
 
diff --git a/oelint_adv/rule_base/rule_var_pn_usage_discouraged.py b/oelint_adv/rule_base/rule_var_pn_usage_discouraged.py
index ce80c39..941d7aa 100644
--- a/oelint_adv/rule_base/rule_var_pn_usage_discouraged.py
+++ b/oelint_adv/rule_base/rule_var_pn_usage_discouraged.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarPnUsageDiscouraged(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.pnusagediscouraged',
+        super(VarPnUsageDiscouraged, self).__init__(id='oelint.vars.pnusagediscouraged',
                          severity='warning',
                          message='Variable shouldn\'t contain ${PN} or ${BPN}')
 
diff --git a/oelint_adv/rule_base/rule_var_quoted.py b/oelint_adv/rule_base/rule_var_quoted.py
index e157120..4e5b40b 100644
--- a/oelint_adv/rule_base/rule_var_quoted.py
+++ b/oelint_adv/rule_base/rule_var_quoted.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarQuoted(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.valuequoted',
+        super(VarQuoted, self).__init__(id='oelint.vars.valuequoted',
                          severity='error',
                          message='Variable value should be quoted')
 
diff --git a/oelint_adv/rule_base/rule_var_rootfscmd.py b/oelint_adv/rule_base/rule_var_rootfscmd.py
index 0d1b845..0a5b938 100644
--- a/oelint_adv/rule_base/rule_var_rootfscmd.py
+++ b/oelint_adv/rule_base/rule_var_rootfscmd.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarRootfsPostprocessCommand(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.rootfspostcmd',
+        super(VarRootfsPostprocessCommand, self).__init__(id='oelint.var.rootfspostcmd',
                          severity='warning',
                          message='ROOTFS_POSTPROCESS_COMMAND should not have trailing blanks')
 
diff --git a/oelint_adv/rule_base/rule_var_section_lowercase.py b/oelint_adv/rule_base/rule_var_section_lowercase.py
index 023c728..4478902 100644
--- a/oelint_adv/rule_base/rule_var_section_lowercase.py
+++ b/oelint_adv/rule_base/rule_var_section_lowercase.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarSectionLowercase(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.sectionlowercase',
+        super(VarSectionLowercase, self).__init__(id='oelint.vars.sectionlowercase',
                          severity='warning',
                          message='\'SECTION\' should only lowercase characters')
 
diff --git a/oelint_adv/rule_base/rule_var_spaces_assignment.py b/oelint_adv/rule_base/rule_var_spaces_assignment.py
index a3e6bc0..3b3d9fc 100644
--- a/oelint_adv/rule_base/rule_var_spaces_assignment.py
+++ b/oelint_adv/rule_base/rule_var_spaces_assignment.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSpacesOnAssignment(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.spacesassignment',
+        super(VarSpacesOnAssignment, self).__init__(id='oelint.vars.spacesassignment',
                          severity='warning',
                          message='Suggest spaces around variable assignment. E.g. \'FOO = "BAR"\'')
 
diff --git a/oelint_adv/rule_base/rule_var_spec.py b/oelint_adv/rule_base/rule_var_spec.py
index 14e80fe..344f0f2 100644
--- a/oelint_adv/rule_base/rule_var_spec.py
+++ b/oelint_adv/rule_base/rule_var_spec.py
@@ -10,7 +10,7 @@ from oelint_parser.helper_files import get_valid_package_names
 
 class VarPnBpnUsage(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.specific',
+        super(VarPnBpnUsage, self).__init__(id='oelint.vars.specific',
                          severity='error',
                          message='\'{a}\' is set specific to [\'{b}\'], but isn\'t known from PACKAGES, MACHINE, DISTRO or resources',
                          onappend=False)
diff --git a/oelint_adv/rule_base/rule_var_src_uri.py b/oelint_adv/rule_base/rule_var_src_uri.py
index 6542a43..94465a9 100644
--- a/oelint_adv/rule_base/rule_var_src_uri.py
+++ b/oelint_adv/rule_base/rule_var_src_uri.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCUriOptions(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.srcurioptions',
+        super(VarSRCUriOptions, self).__init__(id='oelint.vars.srcurioptions',
                          severity='warning',
                          message='<FOO>')
         self._general_options = [
diff --git a/oelint_adv/rule_base/rule_var_src_uri_append.py b/oelint_adv/rule_base/rule_var_src_uri_append.py
index f2c4257..0d58e2a 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_append.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_append.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSRCUriGitTag(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.srcuriappend',
+        super(VarSRCUriGitTag, self).__init__(id='oelint.vars.srcuriappend',
                          severity='error',
                          message='Use SRC_URI_append otherwise this will override weak defaults by inherit')
 
diff --git a/oelint_adv/rule_base/rule_var_src_uri_domains.py b/oelint_adv/rule_base/rule_var_src_uri_domains.py
index 7fb0d05..e5e4b4b 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_domains.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_domains.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCUriOptions(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.srcuridomains',
+        super(VarSRCUriOptions, self).__init__(id='oelint.vars.srcuridomains',
                          severity='warning',
                          message='Recipe is pulling from different domains, this will likely cause issues')
 
diff --git a/oelint_adv/rule_base/rule_var_src_uri_file.py b/oelint_adv/rule_base/rule_var_src_uri_file.py
index e0b6919..7f59168 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_file.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_file.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCUriGitTag(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.srcurifile',
+        super(VarSRCUriGitTag, self).__init__(id='oelint.vars.srcurifile',
                          severity='warning',
                          message='First item of SRC_URI should not be a file:// fetcher, if multiple fetcher are used')
 
diff --git a/oelint_adv/rule_base/rule_var_src_uri_gittag.py b/oelint_adv/rule_base/rule_var_src_uri_gittag.py
index b1336df..2741c77 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_gittag.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_gittag.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCUriGitTag(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.srcurigittag',
+        super(VarSRCUriGitTag, self).__init__(id='oelint.vars.srcurigittag',
                          severity='warning',
                          message='\'tag\' in SRC_URI-options leads to not-reproducible builds as git-tags can move around. Use explicit SRCREV')
 
diff --git a/oelint_adv/rule_base/rule_var_src_uri_srcrevtag.py b/oelint_adv/rule_base/rule_var_src_uri_srcrevtag.py
index b9ea3f8..96ddad8 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_srcrevtag.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_srcrevtag.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCUriSRCREVTag(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.srcurisrcrevtag',
+        super(VarSRCUriSRCREVTag, self).__init__(id='oelint.vars.srcurisrcrevtag',
                          severity='error',
                          message='\'tag\' in SRC_URI and a SRCREV for the same component doesn\'t compute')
 
diff --git a/oelint_adv/rule_base/rule_var_src_uri_wildcard.py b/oelint_adv/rule_base/rule_var_src_uri_wildcard.py
index aea3a7a..e2e5ca0 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_wildcard.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_wildcard.py
@@ -6,7 +6,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarSRCURIWildcard(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.srcuriwildcard',
+        super(VarSRCURIWildcard, self).__init__(id='oelint.var.srcuriwildcard',
                          severity='error',
                          message='\'SRC_URI\' should not contain any wildcards')
 
diff --git a/oelint_adv/rule_base/rule_var_summary_80chars.py b/oelint_adv/rule_base/rule_var_summary_80chars.py
index 0183f44..6e6ab08 100644
--- a/oelint_adv/rule_base/rule_var_summary_80chars.py
+++ b/oelint_adv/rule_base/rule_var_summary_80chars.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarSummary80Chars(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.summary80chars',
+        super(VarSummary80Chars, self).__init__(id='oelint.vars.summary80chars',
                          severity='warning',
                          message='\'SUMMARY\' should not be longer than 80 characters')
 
diff --git a/oelint_adv/rule_base/rule_var_summary_linebreaks.py b/oelint_adv/rule_base/rule_var_summary_linebreaks.py
index ce07335..218ac60 100644
--- a/oelint_adv/rule_base/rule_var_summary_linebreaks.py
+++ b/oelint_adv/rule_base/rule_var_summary_linebreaks.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarSummaryLinebreaks(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.summarylinebreaks',
+        super(VarSummaryLinebreaks, self).__init__(id='oelint.vars.summarylinebreaks',
                          severity='warning',
                          message='\'SUMMARY\' should not contain line breaks')
 
diff --git a/oelint_adv/rule_base/rule_var_trailslash.py b/oelint_adv/rule_base/rule_var_trailslash.py
index df9989a..c0d4a9f 100644
--- a/oelint_adv/rule_base/rule_var_trailslash.py
+++ b/oelint_adv/rule_base/rule_var_trailslash.py
@@ -5,7 +5,7 @@ from oelint_parser.helper_files import expand_term
 
 class VarTrailingSlash(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.notrailingslash',
+        super(VarTrailingSlash, self).__init__(id='oelint.vars.notrailingslash',
                          severity='error',
                          message='\'{a}\' must not end with a \'/\'')
 
diff --git a/oelint_adv/rule_base/rule_vars_bbclassextends.py b/oelint_adv/rule_base/rule_vars_bbclassextends.py
index 9492a75..e167c4d 100644
--- a/oelint_adv/rule_base/rule_vars_bbclassextends.py
+++ b/oelint_adv/rule_base/rule_vars_bbclassextends.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarBbclassextend(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.bbclassextend',
+        super(VarBbclassextend, self).__init__(id='oelint.var.bbclassextend',
                          severity='info',
                          message='BBCLASSEXTEND should be set if possible')
 
diff --git a/oelint_adv/rule_base/rule_vars_downloadfilename.py b/oelint_adv/rule_base/rule_vars_downloadfilename.py
index b4274cb..5f7215b 100644
--- a/oelint_adv/rule_base/rule_vars_downloadfilename.py
+++ b/oelint_adv/rule_base/rule_vars_downloadfilename.py
@@ -7,7 +7,7 @@ from oelint_parser.helper_files import guess_recipe_version
 
 class VarsDownloadfilename(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.downloadfilename',
+        super(VarsDownloadfilename, self).__init__(id='oelint.vars.downloadfilename',
                          severity='warning',
                          message='Fetcher does create a download artifact without \'PV\' in the filename')
 
diff --git a/oelint_adv/rule_base/rule_vars_filessetting.py b/oelint_adv/rule_base/rule_vars_filessetting.py
index 01314ce..db6c7c5 100644
--- a/oelint_adv/rule_base/rule_vars_filessetting.py
+++ b/oelint_adv/rule_base/rule_vars_filessetting.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarUnneededFilesSetting(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.filessetting',
+        super(VarUnneededFilesSetting, self).__init__(id='oelint.vars.filessetting',
                          severity='warning',
                          message='Check for improvable FILES settings',
                          appendix=['hidden', 'double'])
diff --git a/oelint_adv/rule_base/rule_vars_improperinherit.py b/oelint_adv/rule_base/rule_vars_improperinherit.py
index 78aab5e..4eb7eca 100644
--- a/oelint_adv/rule_base/rule_vars_improperinherit.py
+++ b/oelint_adv/rule_base/rule_vars_improperinherit.py
@@ -8,7 +8,7 @@ from oelint_parser.parser import INLINE_BLOCK
 
 class VarImproperInherit(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.improperinherit',
+        super(VarImproperInherit, self).__init__(id='oelint.var.improperinherit',
                          severity='error',
                          message='\'{INH}\' is not a proper bbclass name')
 
diff --git a/oelint_adv/rule_base/rule_vars_listappend.py b/oelint_adv/rule_base/rule_vars_listappend.py
index 6c21792..e0ed4fe 100644
--- a/oelint_adv/rule_base/rule_vars_listappend.py
+++ b/oelint_adv/rule_base/rule_vars_listappend.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarListAppend(Rule):
     def __init__(self):
-        super().__init__(id='oelint.vars.listappend',
+        super(VarListAppend, self).__init__(id='oelint.vars.listappend',
                          severity='error',
                          message='<FOO>')
 
diff --git a/oelint_adv/rule_base/rule_vars_mandatory_exists.py b/oelint_adv/rule_base/rule_vars_mandatory_exists.py
index 5081f91..a3cf5c0 100644
--- a/oelint_adv/rule_base/rule_vars_mandatory_exists.py
+++ b/oelint_adv/rule_base/rule_vars_mandatory_exists.py
@@ -7,7 +7,7 @@ from oelint_parser.helper_files import is_packagegroup
 
 class VarMandatoryExists(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.mandatoryvar',
+        super(VarMandatoryExists, self).__init__(id='oelint.var.mandatoryvar',
                          severity='error',
                          message='<FOO>',
                          onappend=False,
diff --git a/oelint_adv/rule_base/rule_vars_multiinclude.py b/oelint_adv/rule_base/rule_vars_multiinclude.py
index 699ee4f..d875912 100644
--- a/oelint_adv/rule_base/rule_vars_multiinclude.py
+++ b/oelint_adv/rule_base/rule_vars_multiinclude.py
@@ -6,7 +6,7 @@ from oelint_parser.cls_item import Include
 
 class VarMultiInclude(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.multiinclude',
+        super(VarMultiInclude, self).__init__(id='oelint.var.multiinclude',
                          severity='warning',
                          message='\'{INC}\' is included multiple times')
 
diff --git a/oelint_adv/rule_base/rule_vars_multiinherit.py b/oelint_adv/rule_base/rule_vars_multiinherit.py
index 155d641..1f9ddc4 100644
--- a/oelint_adv/rule_base/rule_vars_multiinherit.py
+++ b/oelint_adv/rule_base/rule_vars_multiinherit.py
@@ -6,7 +6,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarMultiInherit(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.multiinherit',
+        super(VarMultiInherit, self).__init__(id='oelint.var.multiinherit',
                          severity='warning',
                          message='\'{INH}\' is included multiple times')
 
diff --git a/oelint_adv/rule_base/rule_vars_native_filename.py b/oelint_adv/rule_base/rule_vars_native_filename.py
index 2533346..60bc517 100644
--- a/oelint_adv/rule_base/rule_vars_native_filename.py
+++ b/oelint_adv/rule_base/rule_vars_native_filename.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarNativeFilename(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.nativefilename',
+        super(VarNativeFilename, self).__init__(id='oelint.var.nativefilename',
                          severity='warning',
                          message='native-recipe-files should include \'-native\' in file name')
 
diff --git a/oelint_adv/rule_base/rule_vars_nativesdk_filename.py b/oelint_adv/rule_base/rule_vars_nativesdk_filename.py
index 6ae1474..8a7fec3 100644
--- a/oelint_adv/rule_base/rule_vars_nativesdk_filename.py
+++ b/oelint_adv/rule_base/rule_vars_nativesdk_filename.py
@@ -4,7 +4,7 @@ from oelint_adv.cls_rule import Rule
 
 class VarNativeSDKFilename(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.nativesdkfilename',
+        super(VarNativeSDKFilename, self).__init__(id='oelint.var.nativesdkfilename',
                          severity='warning',
                          message='nativesdk-recipe-files should include \'nativesdk-\' in file name')
 
diff --git a/oelint_adv/rule_base/rule_vars_order.py b/oelint_adv/rule_base/rule_vars_order.py
index 44fd30b..16ac5a0 100644
--- a/oelint_adv/rule_base/rule_vars_order.py
+++ b/oelint_adv/rule_base/rule_vars_order.py
@@ -5,7 +5,7 @@ from oelint_parser.constants import CONSTANTS
 
 class VarsOrder(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.order',
+        super(VarsOrder, self).__init__(id='oelint.var.order',
                          severity='warning',
                          message='<FOO>',
                          appendix=[self.__cleanname(x) for x in CONSTANTS.VariablesOrder])
diff --git a/oelint_adv/rule_base/rule_vars_pathhardcode.py b/oelint_adv/rule_base/rule_vars_pathhardcode.py
index 5946f50..026c187 100644
--- a/oelint_adv/rule_base/rule_vars_pathhardcode.py
+++ b/oelint_adv/rule_base/rule_vars_pathhardcode.py
@@ -27,7 +27,7 @@ class VarsPathHardcode(Rule):
             '/com': '${sharedstatedir}',
             '/etc': '${sysconfdir}',
         })
-        super().__init__(id='oelint.vars.pathhardcode',
+        super(VarsPathHardcode, self).__init__(id='oelint.vars.pathhardcode',
                          severity='warning',
                          message='<FOO>',
                          appendix=[v.strip('$').strip('{').strip('}') for v in self._map.values()])
diff --git a/oelint_adv/rule_base/rule_vars_suggested.py b/oelint_adv/rule_base/rule_vars_suggested.py
index 86274c8..24dae1b 100644
--- a/oelint_adv/rule_base/rule_vars_suggested.py
+++ b/oelint_adv/rule_base/rule_vars_suggested.py
@@ -5,7 +5,7 @@ from oelint_parser.constants import CONSTANTS
 
 class VarSuggestedExists(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.suggestedvar',
+        super(VarSuggestedExists, self).__init__(id='oelint.var.suggestedvar',
                          severity='info',
                          message='<FOO>',
                          onappend=False,
diff --git a/oelint_adv/rule_base/rule_vars_variable_override.py b/oelint_adv/rule_base/rule_vars_variable_override.py
index dd9f26b..52bf60b 100644
--- a/oelint_adv/rule_base/rule_vars_variable_override.py
+++ b/oelint_adv/rule_base/rule_vars_variable_override.py
@@ -6,7 +6,7 @@ from oelint_parser.cls_item import Variable
 
 class VarOverride(Rule):
     def __init__(self):
-        super().__init__(id='oelint.var.override',
+        super(VarOverride, self).__init__(id='oelint.var.override',
                          severity='error',
                          message='<FOO>')
 
diff --git a/oelint_adv/rule_jetm/rule_var_depends_singleline.py b/oelint_adv/rule_jetm/rule_var_depends_singleline.py
index 35b24b7..b5a3172 100644
--- a/oelint_adv/rule_jetm/rule_var_depends_singleline.py
+++ b/oelint_adv/rule_jetm/rule_var_depends_singleline.py
@@ -4,7 +4,7 @@ from oelint_parser.cls_item import Variable
 
 class VarDependsSingleLine(Rule):
     def __init__(self):
-        super().__init__(id='oelint.jetm.vars.dependssingleline',
+        super(VarDependsSingleLine, self).__init__(id='oelint.jetm.vars.dependssingleline',
                          severity='warning',
                          message='Each [R]DEPENDS entry should be put into a single line')
 
diff --git a/requirements.txt b/requirements.txt
index 84e4ebc..c0dcc51 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,4 +1,2 @@
-urllib3>=1.21.1, <3.0.0
 anytree>=2.7.0, <4.0.0
 colorama>=0.4.3, <2.0.0
-oelint-parser>=2.3.1, <3.0.0
\ No newline at end of file
diff --git a/setup.py b/setup.py
index 8b85b93..29450a7 100644
--- a/setup.py
+++ b/setup.py
@@ -8,7 +8,7 @@ try:
     _long_description = subprocess.check_output(
         ['pandoc', '--from', 'markdown', '--to', 'markdown', 'README.md']).decode('utf-8')
     _long_description_content_type = 'text/markdown'
-except (subprocess.CalledProcessError, FileNotFoundError):
+except (subprocess.CalledProcessError, IOError, OSError):
     pass
 
 requirements = []
diff --git a/tests/test_user_interface.py b/tests/test_user_interface.py
index 52f276d..7deea3e 100644
--- a/tests/test_user_interface.py
+++ b/tests/test_user_interface.py
@@ -30,11 +30,11 @@ class TestClassIntegration(TestBaseClass):
         issues = [x[1] for x in run(_args)]
         issues_formatted = '\n'.join(issues)
         assert(any(Fore.RED in x for x in issues)
-               ), f'red expected in:\n{issues_formatted}'
+               ), 'red expected in:\n{}'.format(issues_formatted)
         assert(any(Fore.YELLOW in x for x in issues)
-               ), f'yellow expected in:\n{issues_formatted}'
+               ), 'yellow expected in:\n{}'.format(issues_formatted)
         assert(any(Fore.GREEN in x for x in issues)
-               ), f'green expected in:\n{issues_formatted}'
+               ), 'green expected in:\n{}'.format(issues_formatted)
 
     @pytest.mark.parametrize('input',
                              [
@@ -208,7 +208,7 @@ class TestClassIntegration(TestBaseClass):
         _rule_file = self._create_tempfile(
             'rulefile', '{"oelint.var.mandatoryvar": ""}')
         _args = self._create_args(
-            input, extraopts=[f'--rulefile={_rule_file}'])
+            input, extraopts=['--rulefile={}'.format(_rule_file)])
         for issue in [x[1] for x in run(_args)]:
             assert ':error:' in issue
 
@@ -668,7 +668,7 @@ class TestClassIntegration(TestBaseClass):
 
         _rule_file = self._create_tempfile('rules.json', json.dumps(input))
         _args = self._create_args(
-            {}, extraopts=[f'--rulefile={_rule_file}', '--print-rulefile'])
+            {}, extraopts=['--rulefile={}'.format(_rule_file), '--print-rulefile'])
         print_rulefile(_args)
 
         out = json.loads(capsys.readouterr().out)
