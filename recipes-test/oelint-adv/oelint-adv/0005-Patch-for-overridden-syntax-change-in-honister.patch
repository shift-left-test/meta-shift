diff --git a/README.md b/README.md
index 60ef006..7b8cdf9 100644
--- a/README.md
+++ b/README.md
@@ -147,7 +147,7 @@ Rules marked with **[S]** can have multiple sub-IDs
 * oelint.task.order - Order of tasks **[S]**
 * oelint.task.pythonprefix - Tasks containing python code should be prefixed with 'python' in function header
 * oelint.var.bbclassextend - Use BBCLASSEXTEND when possible
-* oelint.var.filesoverride - FILES_* variables should not be overridden
+* oelint.var.filesoverride - FILES:* variables should not be overridden
 * oelint.var.improperinherit - Warn about improperly named inherits
 * oelint.var.licenseremotefile - License shall be a file in remote source not a local file
 * oelint.var.mandatoryvar - Check for mandatory variables **[S]**
@@ -160,7 +160,7 @@ Rules marked with **[S]** can have multiple sub-IDs
 * oelint.var.rootfspostcmd - ROOTFS_POSTPROCESS_COMMAND should not have trailing blanks
 * oelint.var.srcuriwildcard - 'SRC_URI' should not contain any wildcards
 * oelint.var.suggestedvar - Notice on suggested variables **[S]**
-* oelint.vars.appendop - Use '_append' instead of ' += '
+* oelint.vars.appendop - Use ':append' instead of ' += '
 * oelint.vars.autorev - The usage of 'AUTOREV' for SRCREV leads to not reproducible builds
 * oelint.vars.bbvars - Variables that shouldn't be altered in recipe scope **[S]**
 * oelint.vars.bugtrackerisurl - BUGTRACKER should be an URL
@@ -195,7 +195,7 @@ Rules marked with **[S]** can have multiple sub-IDs
 * oelint.vars.sectionlowercase - SECTION should be lowercase only **[F]**
 * oelint.vars.spacesassignment - ' = ' should be correct variable assignment
 * oelint.vars.specific - Variable is specific to an unknown identifier
-* oelint.vars.srcuriappend - Use SRC_URI_append otherwise this will override weak defaults by inherit
+* oelint.vars.srcuriappend - Use SRC_URI:append otherwise this will override weak defaults by inherit
 * oelint.vars.srcuridomains - Recipe is pulling from different domains, this will likely cause issues
 * oelint.vars.srcurifile - First item of SRC_URI should not be a file:// fetcher, if multiple fetcher are used
 * oelint.vars.srcurigittag - 'tag' in SRC_URI-options leads to not-reproducible builds
@@ -365,7 +365,7 @@ Multiple IDs can be separated by commas.
 
 ```bitbake
 # nooelint: oelint.vars.insaneskip
-INSANE_SKIP_${PN} = "foo"
+INSANE_SKIP:${PN} = "foo"
 ```
 
 will not warn about the usage of `INSANE_SKIP`.
diff --git a/oelint_adv/rule_base/rule_var_duplicates.py b/oelint_adv/rule_base/rule_var_duplicates.py
index 3609400..239f434 100644
--- a/oelint_adv/rule_base/rule_var_duplicates.py
+++ b/oelint_adv/rule_base/rule_var_duplicates.py
@@ -10,7 +10,7 @@ class VarDuplicates(Rule):
 
     def check(self, _file, stash):
         res = []
-        for c in ['DEPENDS', 'RDEPENDS_${PN}']:
+        for c in ['DEPENDS', 'RDEPENDS']:
             items = stash.GetItemsFor(filename=_file, classifier=Variable.CLASSIFIER,
                                       attribute=Variable.ATTR_VAR, attributeValue=c)
             _items = {}
diff --git a/oelint_adv/rule_base/rule_var_inconsspaces.py b/oelint_adv/rule_base/rule_var_inconsspaces.py
index 3b6fa5b..13b52b3 100644
--- a/oelint_adv/rule_base/rule_var_inconsspaces.py
+++ b/oelint_adv/rule_base/rule_var_inconsspaces.py
@@ -25,5 +25,5 @@ class VarInconSpaces(Rule):
                                     'Assignment should be \'VAR += "foo"\' not \'VAR += " foo"\'')
             if 'append' in app_operation and not _stripped.startswith(' '):
                 res += self.finding(i.Origin, i.InFileLine,
-                                    'Assignment should be \'VAR_append = " foo"\' not \'VAR_append = "foo"\'')
+                                    'Assignment should be \'VAR:append = " foo"\' not \'VAR:append = "foo"\'')
         return res
diff --git a/oelint_adv/rule_base/rule_var_src_uri_append.py b/oelint_adv/rule_base/rule_var_src_uri_append.py
index f2c4257..f1aec9d 100644
--- a/oelint_adv/rule_base/rule_var_src_uri_append.py
+++ b/oelint_adv/rule_base/rule_var_src_uri_append.py
@@ -6,7 +6,7 @@ class VarSRCUriGitTag(Rule):
     def __init__(self):
         super().__init__(id='oelint.vars.srcuriappend',
                          severity='error',
-                         message='Use SRC_URI_append otherwise this will override weak defaults by inherit')
+                         message='Use SRC_URI:append otherwise this will override weak defaults by inherit')
 
     def check(self, _file, stash):
         res = []
diff --git a/oelint_adv/rule_base/rule_vars_filessetting.py b/oelint_adv/rule_base/rule_vars_filessetting.py
index 5f8212b..b634359 100644
--- a/oelint_adv/rule_base/rule_vars_filessetting.py
+++ b/oelint_adv/rule_base/rule_vars_filessetting.py
@@ -26,7 +26,7 @@ class VarUnneededFilesSetting(Rule):
             filename=_file, attribute=Variable.ATTR_VAR)
         _seenpath = {}
         for p in _expanded['PACKAGES']:
-            _files = 'FILES_{a}'.format(a=p)
+            _files = 'FILES:{a}'.format(a=p)
             _convfiles = _files.replace(_expanded['PN'][0], '${PN}')
             if _files in _expanded:
                 _pattern = _expanded[_files]
