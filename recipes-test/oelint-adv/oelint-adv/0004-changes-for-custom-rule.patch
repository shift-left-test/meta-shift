diff --git a/oelint_adv/rule_base/rule_var_src_uri_checksum.py b/oelint_adv/rule_base/rule_var_src_uri_checksum.py
new file mode 100644
index 0000000..e790ef1
--- /dev/null
+++ b/oelint_adv/rule_base/rule_var_src_uri_checksum.py
@@ -0,0 +1,73 @@
+from oelint_parser.cls_item import Variable
+from oelint_adv.cls_rule import Rule
+from oelint_parser.helper_files import get_scr_components
+from oelint_parser.parser import INLINE_BLOCK
+
+
+class VarSRCUriOptions(Rule):
+    def __init__(self):
+        super(VarSRCUriOptions, self).__init__(id="oelint.vars.srcurichecksum",
+                                               severity="error",
+                                               message="<FOO>")
+
+    def check(self, _file, stash):
+        res = []
+        items = stash.GetItemsFor(filename=_file, classifier=Variable.CLASSIFIER,
+                                  attribute=Variable.ATTR_VAR, attributeValue="SRC_URI")
+        md5sum = []
+        sha256sum = []
+        res_candidate = []
+        for i in items:
+            if i.Flag.endswith("md5sum"):
+                if i.Flag == "md5sum":
+                    md5sum.append("")
+                else:
+                    md5sum.append(i.Flag.rsplit(".", 1)[0])
+            elif i.Flag.endswith("sha256sum"):
+                if i.Flag == "sha256sum":
+                    sha256sum.append("")
+                else:
+                    sha256sum.append(i.Flag.rsplit(".", 1)[0])
+            else:
+                lines = [y.strip('"') for y in i.get_items() if y]
+                for x in lines:
+                    if x == INLINE_BLOCK:
+                        continue
+                    _url = get_scr_components(x)
+                    if _url["scheme"] in ["http", "https", "ftp", "ftps", "sftp", "s3"]:
+                        name = ""
+                        if "name" in _url["options"]:
+                            name = _url["options"]["name"]
+                        res_candidate.append((name, i.Origin, i.InFileLine + lines.index(x)))
+
+        res_candidate.sort(key=lambda tup: tup[0])
+
+        no_name_src_uri = False
+        for (name, filename, filelines) in res_candidate:
+            message = ""
+            if name == "":
+                if no_name_src_uri:
+                    message = "if SRC_URI have multiple URLs, each URL has checksum"
+                else:
+                    if "" not in md5sum:
+                        message = "SRC_URI[md5sum]"
+                    if "" not in sha256sum:
+                        if len(message) > 0:
+                            message += ", "
+                        message += "SRC_URI[sha256sum]"
+                    if len(message) > 0:
+                        message += " is(are) needed"
+                no_name_src_uri = True
+            else:
+                if name not in md5sum:
+                    message = "SRC_URI[%s.md5sum]" % name
+                if name not in sha256sum:
+                    if len(message) > 0:
+                      message += ", "
+                    message += "SRC_URI[%s.sha256sum]" % name
+                if len(message) > 0:
+                    message += " is(are) needed"
+            if len(message) > 0:
+                res += self.finding(filename, filelines, message)
+
+        return res
diff --git a/tests/test_class_oelint_vars_srcurichecksum.py b/tests/test_class_oelint_vars_srcurichecksum.py
new file mode 100644
index 0000000..aaa74d4
--- /dev/null
+++ b/tests/test_class_oelint_vars_srcurichecksum.py
@@ -0,0 +1,111 @@
+import pytest
+
+from .base import TestBaseClass
+
+
+class TestClassOelintVarsSRCURICHECKSUM(TestBaseClass):
+
+    @pytest.mark.parametrize('id', ['oelint.vars.srcurichecksum'])
+    @pytest.mark.parametrize('occurance', [1])
+    @pytest.mark.parametrize('input',
+        [
+            {
+                'oelint_adv_test.bb':
+                '''
+                SRC_URI += "ftp://foo;name=f3"
+                '''
+            },
+            {
+                'oelint_adv_test.bb':
+                '''
+                SRC_URI += "http://foo;name=f1"
+                SRC_URI[f1.md5sum] = "a"
+                '''
+            },
+            {
+                'oelint_adv_test.bb':
+                '''
+                SRC_URI += "https://foo;name=f2"
+                SRC_URI[f2.sha256sum] = "a"
+                '''
+            },
+            {
+                'oelint_adv_test.bb':
+                '''
+                SRC_URI += "ftp://foo"
+                SRC_URI += "ftp://foo"
+                SRC_URI += "http://foo;name=f1"
+                SRC_URI += "https://foo;name=f2"
+                SRC_URI[f1.md5sum] = "a"
+                SRC_URI[f1.sha256sum] = "a"
+                SRC_URI[f2.md5sum] = "a"
+                SRC_URI[f2.sha256sum] = "a"
+                SRC_URI[md5sum] = "a"
+                SRC_URI[sha256sum] = "a"
+                '''
+            },
+            {
+                'oelint_adv_test.bb':
+                '''
+                SRC_URI += "ftp://foo"
+                SRC_URI[sha256sum] = "a"
+                '''
+            },
+        ],
+    )
+    def test_bad(self, input, id, occurance):
+        self.check_for_id(self._create_args(input), id, occurance)
+
+    @pytest.mark.parametrize('id', ['oelint.vars.srcurichecksum'])
+    @pytest.mark.parametrize('occurance', [0])
+    @pytest.mark.parametrize('input',
+        [
+            {
+                'oelint_adv_test.bb':
+                '''
+                SRC_URI += "file://foo"
+                SRC_URI += "bzr://foo"
+                SRC_URI += "crcc://foo"
+                SRC_URI += "cvs://foo"
+                SRC_URI += "ftp://foo;name=f3"
+                SRC_URI += "git://foo;name"
+                SRC_URI += "gitsm://foo"
+                SRC_URI += "gitannex://foo"
+                SRC_URI += "hg://foo"
+                SRC_URI += "http://foo;name=f1"
+                SRC_URI += "https://foo;name=f2"
+                SRC_URI += "osc://foo"
+                SRC_URI += "p4://foo"
+                SRC_URI += "repo://foo"
+                SRC_URI += "ssh://foo"
+                SRC_URI += "s3://foo;name=f5"
+                SRC_URI += "sftp://foo;name=f4"
+                SRC_URI += "npm://foo"
+                SRC_URI += "svn://foo"
+                SRC_URI[f1.md5sum] = "a"
+                SRC_URI[f1.sha256sum] = "a"
+                SRC_URI[f2.md5sum] = "a"
+                SRC_URI[f2.sha256sum] = "a"
+                SRC_URI[f3.md5sum] = "a"
+                SRC_URI[f3.sha256sum] = "a"
+                SRC_URI[f4.md5sum] = "a"
+                SRC_URI[f4.sha256sum] = "a"
+                SRC_URI[f5.md5sum] = "a"
+                SRC_URI[f5.sha256sum] = "a"
+                '''
+            },
+            {
+                'oelint_adv_test.bb':
+                '''
+                SRC_URI += "ftp://foo"
+                SRC_URI += "ftp://foo;name=f1"
+                SRC_URI[md5sum] = "a"
+                SRC_URI[sha256sum] = "a"
+                SRC_URI[f1.md5sum] = "a"
+                SRC_URI[f1.sha256sum] = "a"
+                '''
+            },
+        ],
+    )
+    def test_good(self, input, id, occurance):
+        self.check_for_id(self._create_args(input), id, occurance)
