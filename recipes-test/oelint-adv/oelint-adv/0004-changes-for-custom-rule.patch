diff --git a/oelint_adv/rule_base/rule_tasks_customorder.py b/oelint_adv/rule_base/rule_tasks_customorder.py
deleted file mode 100644
index 8de340d..0000000
--- a/oelint_adv/rule_base/rule_tasks_customorder.py
+++ /dev/null
@@ -1,70 +0,0 @@
-import re
-
-from anytree import LoopError
-from anytree import Node
-from oelint_parser.cls_item import TaskAdd
-from oelint_adv.cls_rule import Rule
-
-
-class TaskCustomOrder(Rule):
-    def __init__(self):
-        super(TaskCustomOrder, self).__init__(id="oelint.task.customorder",
-                         severity="error",
-                         message="<FOO>")
-
-    def __getNodeFromException(self, msg):
-        m = re.match(r"^.*Node\(\'(?P<path>.*)\'\)\.$", msg)
-        if m:
-            return [x for x in m.group("path").split("/") if x]
-        return [] # pragma: no cover
-
-    def check(self, _file, stash):
-        res = []
-        items = stash.GetItemsFor(
-            filename=_file, classifier=TaskAdd.CLASSIFIER)
-        _nodes = []
-        for item in items:
-            for t in item.After:
-                _n = None
-                _m = None
-                try:
-                    _t = [y for y in _nodes if y.name == t]
-                    if not any(_t):
-                        _n = Node(t)
-                        _nodes.append(_n)
-                    else:
-                        _n = _t[0]
-                    _t = [y for y in _nodes if y.name == item.FuncName]
-                    if not any(_t):
-                        _m = Node(item.FuncName)
-                        _nodes.append(_m)
-                    else:
-                        _m = _t[0]
-                    if _m not in _n.children: # pragma: no cover
-                        _n.children += (_m,)
-                except LoopError as e:
-                    _path = self.__getNodeFromException(str(e)) + [t]
-                    res += self.finding(item.Origin, item.InFileLine,
-                                        "Assignment creates a cyclic dependency - Path={}".format("->".join(_path)))
-            for t in item.Before:
-                try:
-                    _n = None
-                    _t = [y for y in _nodes if y.name == item.FuncName]
-                    if not any(_t):
-                        _n = Node(item.FuncName) # pragma: no cover
-                        _nodes.append(_n) # pragma: no cover
-                    else:
-                        _n = _t[0]
-                    _t = [y for y in _nodes if y.name == t]
-                    _m = None
-                    if not any(_t):
-                        _m = Node(t) # pragma: no cover
-                        _nodes.append(_m) # pragma: no cover
-                    else:
-                        _m = _t[0]
-                    if _m not in _n.children: # pragma: no cover
-                        _n.children += (_m,)
-                except LoopError as e:
-                    _path = self.__getNodeFromException(str(e)) + [t]
-                    res += self.finding(item.Origin, item.InFileLine, "Assignment creates a cyclic dependency - Path={}".format("->".join(_path)))
-        return res
diff --git a/oelint_adv/rule_base/rule_var_src_uri_checksum.py b/oelint_adv/rule_base/rule_var_src_uri_checksum.py
new file mode 100644
index 0000000..fef3b65
--- /dev/null
+++ b/oelint_adv/rule_base/rule_var_src_uri_checksum.py
@@ -0,0 +1,74 @@
+from oelint_parser.cls_item import Variable
+from oelint_adv.cls_rule import Rule
+from oelint_parser.helper_files import get_scr_components
+from oelint_parser.parser import INLINE_BLOCK
+
+
+class VarSRCUriOptions(Rule):
+    def __init__(self):
+        super(VarSRCUriOptions, self).__init__(id="oelint.vars.srcurichecksum",
+                                               severity="error",
+                                               message="<FOO>")
+
+    def check(self, _file, stash):
+        res = []
+        items = stash.GetItemsFor(filename=_file, classifier=Variable.CLASSIFIER,
+                                  attribute=Variable.ATTR_VAR, attributeValue="SRC_URI")
+        md5sum = []
+        sha256sum = []
+        res_candidate = []
+        for i in items:
+            if i.Flag.endswith("md5sum"):
+                if i.Flag == "md5sum":
+                    md5sum.append("")
+                else:
+                    md5sum.append(i.Flag.rsplit(".", 1)[0])
+            elif i.Flag.endswith("sha256sum"):
+                if i.Flag == "sha256sum":
+                    sha256sum.append("")
+                else:
+                    sha256sum.append(i.Flag.rsplit(".", 1)[0])
+            else:
+                lines = [y.strip('"') for y in i.get_items() if y]
+                for x in lines:
+                    if x == INLINE_BLOCK:
+                        continue
+                    _url = get_scr_components(x)
+                    if _url["scheme"] in ["http", "https", "ftp", "ftps", "sftp", "s3"]:
+                        name = ""
+                        if "name" in _url["options"]:
+                            name = _url["options"]["name"]
+                        res_candidate.append((name, i.Origin, i.InFileLine + lines.index(x)))
+
+        res_candidate.sort(key=lambda tup: tup[0])
+
+        no_name_src_uri = False
+        for (name, filename, filelines) in res_candidate:
+            message = ""
+            if name == "":
+                if no_name_src_uri:
+                    message = "if SRC_URI have multiple URLs, each URL has checksum"
+                else:
+                    if "" not in md5sum:
+                        message = "SRC_URI[md5sum]"
+                    if "" not in sha256sum:
+                        if len(message) > 0:
+                            message += ", "
+                        message += "SRC_URI[sha256sum]"
+                    if len(message) > 0:
+                        message += " is(are) needed"
+                no_name_src_uri = True
+            else:
+                if name not in md5sum:
+                    message = "SRC_URI[%s.md5sum]" % name
+                if name not in sha256sum:
+                    if len(message) > 0:
+                      message += ", "
+                    message += "SRC_URI[%s.sha256sum]" % name
+                if len(message) > 0:
+                    message += " is(are) needed"
+            if len(message) > 0:
+                res += self.finding(filename, filelines, message)
+
+        return res
+
diff --git a/tests/test_class_integration.py b/tests/test_class_integration.py
index bb0d97d..7964687 100644
--- a/tests/test_class_integration.py
+++ b/tests/test_class_integration.py
@@ -156,15 +156,13 @@ class TestClassIntegration(TestBaseClass):
         {
             "oelint.var.suggestedvar": "info",
             "oelint.var.suggestedvar.AUTHOR": "error",
-            "oelint.var.suggestedvar.BBCLASSEXTEND": "error",
             "oelint.var.suggestedvar.BUGTRACKER": "error",
-            "oelint.var.suggestedvar.SECTION": "error",
-            "oelint.var.suggestedvar.CVE_PRODUCT": "info"
+            "oelint.var.suggestedvar.SECTION": "info"
         }
         """
         _extra_opts = ["--rulefile={}".format(self._create_tempfile('rulefile', __cnt)), '--noinfo']
-        self.check_for_id(self._create_args(input, _extra_opts), 'oelint.var.suggestedvar.CVE_PRODUCT', 0)
-        self.check_for_id(self._create_args(input, _extra_opts), 'oelint.var.suggestedvar.BBCLASSEXTEND', 1)
+        self.check_for_id(self._create_args(input, _extra_opts), 'oelint.var.suggestedvar.SECTION', 0)
+        self.check_for_id(self._create_args(input, _extra_opts), 'oelint.var.suggestedvar.BUGTRACKER', 1)
 
 
     @pytest.mark.parametrize('id', ['oelint.var.override'])
diff --git a/tests/test_class_oelint_task_customorder.py b/tests/test_class_oelint_task_customorder.py
deleted file mode 100644
index a3a7c67..0000000
--- a/tests/test_class_oelint_task_customorder.py
+++ /dev/null
@@ -1,52 +0,0 @@
-import os
-import sys
-
-import pytest
-
-sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
-
-from base import TestBaseClass
-
-class TestClassOelintTaskCustomOrder(TestBaseClass):
-
-    @pytest.mark.parametrize('id', ['oelint.task.customorder'])
-    @pytest.mark.parametrize('occurance', [1])
-    @pytest.mark.parametrize('input', 
-        [
-            {
-            'oelint_adv_test.bb':
-            '''
-            addtask do_compile after do_configure
-            addtask do_configure after do_compile
-            '''
-            },
-            {
-            'oelint_adv_test.bb':
-            '''
-            do_foo() {
-                :
-            }
-            addtask do_compile after do_configure
-            addtask do_foo before do_configure after do_compile
-            '''
-            },
-        ],
-    )
-    def test_bad(self, input, id, occurance):
-        self.check_for_id(self._create_args(input), id, occurance)
-
-    @pytest.mark.parametrize('id', ['oelint.task.customorder'])
-    @pytest.mark.parametrize('occurance', [0])
-    @pytest.mark.parametrize('input', 
-        [
-            {
-            'oelint_adv_test.bb':
-            '''
-            addtask do_compile after do_foo
-            addtask do_configure after do_compile
-            '''
-            },
-        ],
-    )
-    def test_good(self, input, id, occurance):
-        self.check_for_id(self._create_args(input), id, occurance)
\ No newline at end of file
diff --git a/tests/test_class_oelint_var_suggested.py b/tests/test_class_oelint_var_suggested.py
index 1a8f72e..2af3f22 100644
--- a/tests/test_class_oelint_var_suggested.py
+++ b/tests/test_class_oelint_var_suggested.py
@@ -20,8 +20,6 @@ class TestClassOelintVarSuggestedVar(TestBaseClass):
     @pytest.mark.parametrize('var', [
         "AUTHOR",
         "BUGTRACKER",
-        "BBCLASSEXTEND",
-        "CVE_PRODUCT",
         "SECTION",
     ])
     def test_bad(self, id, occurance, var):
diff --git a/tests/test_class_oelint_vars_srcurichecksum.py b/tests/test_class_oelint_vars_srcurichecksum.py
new file mode 100644
index 0000000..180c5fd
--- /dev/null
+++ b/tests/test_class_oelint_vars_srcurichecksum.py
@@ -0,0 +1,115 @@
+import os
+import sys
+
+import pytest
+
+sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
+
+from base import TestBaseClass
+
+class TestClassOelintVarsSRCURICHECKSUM(TestBaseClass):
+
+    @pytest.mark.parametrize('id', ['oelint.vars.srcurichecksum'])
+    @pytest.mark.parametrize('occurance', [1])
+    @pytest.mark.parametrize('input', 
+        [
+            {
+            'oelint_adv_test.bb':
+            '''
+            SRC_URI += "ftp://foo;name=f3"
+            '''
+            },
+            {
+            'oelint_adv_test.bb':
+            '''
+            SRC_URI += "http://foo;name=f1"
+            SRC_URI[f1.md5sum] = "a"
+            '''
+            },
+            {
+            'oelint_adv_test.bb':
+            '''
+            SRC_URI += "https://foo;name=f2"
+            SRC_URI[f2.sha256sum] = "a"
+            '''
+            },
+            {
+            'oelint_adv_test.bb':
+            '''
+            SRC_URI += "ftp://foo"
+            SRC_URI += "ftp://foo"
+            SRC_URI += "http://foo;name=f1"
+            SRC_URI += "https://foo;name=f2"
+            SRC_URI[f1.md5sum] = "a"
+            SRC_URI[f1.sha256sum] = "a"
+            SRC_URI[f2.md5sum] = "a"
+            SRC_URI[f2.sha256sum] = "a"
+            SRC_URI[md5sum] = "a"
+            SRC_URI[sha256sum] = "a"
+            '''
+            },
+            {
+            'oelint_adv_test.bb':
+            '''
+            SRC_URI += "ftp://foo"
+            SRC_URI[sha256sum] = "a"
+            '''
+            },
+        ],
+    )
+    def test_bad(self, input, id, occurance):
+        self.check_for_id(self._create_args(input), id, occurance)
+
+    @pytest.mark.parametrize('id', ['oelint.vars.srcurichecksum'])
+    @pytest.mark.parametrize('occurance', [0])
+    @pytest.mark.parametrize('input', 
+        [
+            {
+            'oelint_adv_test.bb':
+            '''
+            SRC_URI += "file://foo"
+            SRC_URI += "bzr://foo"
+            SRC_URI += "crcc://foo"
+            SRC_URI += "cvs://foo"
+            SRC_URI += "ftp://foo;name=f3"
+            SRC_URI += "git://foo;name"
+            SRC_URI += "gitsm://foo"
+            SRC_URI += "gitannex://foo"
+            SRC_URI += "hg://foo"
+            SRC_URI += "http://foo;name=f1"
+            SRC_URI += "https://foo;name=f2"
+            SRC_URI += "osc://foo"
+            SRC_URI += "p4://foo"
+            SRC_URI += "repo://foo"
+            SRC_URI += "ssh://foo"
+            SRC_URI += "s3://foo;name=f5"
+            SRC_URI += "sftp://foo;name=f4"
+            SRC_URI += "npm://foo"
+            SRC_URI += "svn://foo"
+            SRC_URI[f1.md5sum] = "a"
+            SRC_URI[f1.sha256sum] = "a"
+            SRC_URI[f2.md5sum] = "a"
+            SRC_URI[f2.sha256sum] = "a"
+            SRC_URI[f3.md5sum] = "a"
+            SRC_URI[f3.sha256sum] = "a"
+            SRC_URI[f4.md5sum] = "a"
+            SRC_URI[f4.sha256sum] = "a"
+            SRC_URI[f5.md5sum] = "a"
+            SRC_URI[f5.sha256sum] = "a"
+            '''
+            },
+            {
+            'oelint_adv_test.bb':
+            '''
+            SRC_URI += "ftp://foo"
+            SRC_URI += "ftp://foo;name=f1"
+            SRC_URI[md5sum] = "a"
+            SRC_URI[sha256sum] = "a"
+            SRC_URI[f1.md5sum] = "a"
+            SRC_URI[f1.sha256sum] = "a"
+            '''
+            },
+        ],
+    )
+    def test_good(self, input, id, occurance):
+        self.check_for_id(self._create_args(input), id, occurance)

