From f9a8214078fe8d2bb5db58c261b4077d895dc540 Mon Sep 17 00:00:00 2001
From: "sangmo.kang" <sangmo.kang@lge.com>
Date: Fri, 18 Jun 2021 05:58:42 +0000
Subject: [PATCH] compatibility with python2

---
 oelint_parser/cls_item.py     | 20 ++++++++++----------
 oelint_parser/cls_stash.py    |  4 ++--
 oelint_parser/constants.py    |  2 +-
 oelint_parser/helper_files.py |  7 +++++--
 oelint_parser/parser.py       | 12 ++++++------
 setup.py                      |  2 +-
 6 files changed, 25 insertions(+), 22 deletions(-)

diff --git a/oelint_parser/cls_item.py b/oelint_parser/cls_item.py
index 66a485c..4cfb8d1 100644
--- a/oelint_parser/cls_item.py
+++ b/oelint_parser/cls_item.py
@@ -4,7 +4,7 @@ import re
 from oelint_parser.constants import CONSTANTS
 
 
-class Item():
+class Item(object):
     """Base class for all Stash items
     """
     ATTR_LINE = "Line"
@@ -258,7 +258,7 @@ class Variable(Item):
             operator {str} -- Operation performed to the variable
             flag {str} -- Optional variable flag
         """
-        super().__init__(origin, line, infileline, rawtext, realraw)
+        super(Variable, self).__init__(origin, line, infileline, rawtext, realraw)
         if "inherit" != name:
             self.__VarName, self.__SubItem, self.__PkgSpec = self.extract_sub(
                 name)
@@ -438,7 +438,7 @@ class Comment(Item):
             rawtext {str} -- Raw input string (except inline code blocks)
             realraw {str} -- Unprocessed input
         """
-        super().__init__(origin, line, infileline, rawtext, realraw)
+        super(Comment, self).__init__(origin, line, infileline, rawtext, realraw)
 
     def get_items(self):
         """Get single lines of block
@@ -466,7 +466,7 @@ class Include(Item):
             incname {str} -- raw name of the include file
             statement {str} -- either include or require
         """
-        super().__init__(origin, line, infileline, rawtext, realraw)
+        super(Include, self).__init__(origin, line, infileline, rawtext, realraw)
         self.__IncName = incname
         self.__Statement = statement
 
@@ -514,7 +514,7 @@ class Export(Item):
             name {str} -- variable name of the export
             value {str} -- (optional) value of the export
         """
-        super().__init__(origin, line, infileline, rawtext, realraw)
+        super(Export, self).__init__(origin, line, infileline, rawtext, realraw)
         self.__Name = name
         self.__Value = value
 
@@ -566,7 +566,7 @@ class Function(Item):
             python {bool} -- python function according to parser (default: {False})
             fakeroot {bool} -- uses fakeroot (default: {False})
         """
-        super().__init__(origin, line, infileline, rawtext, realraw)
+        super(Function, self).__init__(origin, line, infileline, rawtext, realraw)
         self.__IsPython = python is not None
         self.__IsFakeroot = fakeroot is not None
         name = name or ""
@@ -693,7 +693,7 @@ class PythonBlock(Item):
             realraw {str} -- Unprocessed input
             name {str} -- Function name
         """
-        super().__init__(origin, line, infileline, rawtext, realraw)
+        super(PythonBlock, self).__init__(origin, line, infileline, rawtext, realraw)
         self.__FuncName = name
 
     @property
@@ -733,7 +733,7 @@ class TaskAssignment(Item):
             ident {str} -- task flag
             value {str} -- value of modification
         """
-        super().__init__(origin, line, infileline, rawtext, realraw)
+        super(TaskAssignment, self).__init__(origin, line, infileline, rawtext, realraw)
         self.__FuncName = name
         self.__VarName = ident
         self.__VarValue = value
@@ -795,7 +795,7 @@ class TaskAdd(Item):
             before {str} -- before statement (default: {""})
             after {str} -- after statement (default: {""})
         """
-        super().__init__(origin, line, infileline, rawtext, realraw)
+        super(TaskAdd, self).__init__(origin, line, infileline, rawtext, realraw)
         self.__FuncName = name
         self.__Before = [x for x in (before or "").split(" ") if x]
         self.__After = [x for x in (after or "").split(" ") if x]
@@ -851,7 +851,7 @@ class MissingFile(Item):
             filename {str} -- filename of the file that can't be found
             statement {str} -- either include or require
         """
-        super().__init__(origin, line, infileline, "", "")
+        super(MissingFile, self).__init__(origin, line, infileline, "", "")
         self.__Filename = filename
         self.__Statement = statement
 
diff --git a/oelint_parser/cls_stash.py b/oelint_parser/cls_stash.py
index bd11b9b..0837ba6 100644
--- a/oelint_parser/cls_stash.py
+++ b/oelint_parser/cls_stash.py
@@ -7,7 +7,7 @@ from oelint_parser.helper_files import expand_term, guess_recipe_name, guess_rec
 from oelint_parser.constants import CONSTANTS
 
 
-class Stash():
+class Stash(object):
 
     def __init__(self, quiet=False):
         """constructor
@@ -176,7 +176,7 @@ class Stash():
             "PV": guess_recipe_version(filename),
             "BPN": guess_base_recipe_name(filename)
         }
-        _exp = {**_exp, **CONSTANTS.SetsBase}
+        _exp = dict(list(_exp.items()) + list(CONSTANTS.SetsBase.items()))
         for item in sorted(_res, key=lambda x: x.Line):
             varop = item.VarOp
             name = item.VarName
diff --git a/oelint_parser/constants.py b/oelint_parser/constants.py
index e50441f..528dda1 100644
--- a/oelint_parser/constants.py
+++ b/oelint_parser/constants.py
@@ -25,7 +25,7 @@ class Constants():
         try:
             with open(path) as _in:
                 return json.load(_in)
-        except (FileNotFoundError, OSError, json.JSONDecodeError) as e:
+        except (IOError, OSError, json.JSONDecodeError) as e:
             sys.stderr.write('Cannot load constant database\n')
             return {}
 
diff --git a/oelint_parser/helper_files.py b/oelint_parser/helper_files.py
index ef00da2..7fa8036 100644
--- a/oelint_parser/helper_files.py
+++ b/oelint_parser/helper_files.py
@@ -1,7 +1,10 @@
 import glob
 import os
 import re
-from urllib.parse import urlparse
+try:
+    from urllib.parse import urlsplit
+except ImportError:
+    from urlparse import urlsplit
 
 from oelint_parser.cls_item import Variable
 from oelint_parser.constants import CONSTANTS
@@ -93,7 +96,7 @@ def get_scr_components(string):
         dict -- scheme: protocol used, src: source URI, options: parsed options
     """
     _raw = _replace_with_known_mirrors(string)
-    _url = urlparse(_replace_with_known_mirrors(string))
+    _url = urlsplit(_replace_with_known_mirrors(string))
     _scheme = _url.scheme
     _tmp = _url.netloc
     if _url.path:
diff --git a/oelint_parser/parser.py b/oelint_parser/parser.py
index 62dffae..f616d99 100644
--- a/oelint_parser/parser.py
+++ b/oelint_parser/parser.py
@@ -59,13 +59,13 @@ def prepare_lines_subparser(_iter, lineOffset, num, line, raw_line=None):
     res = []
     raw_line = raw_line or line
     if re.search(r"\\\s*\n", raw_line):
-        _, line = _iter.__next__()
+        _, line = next(_iter)
         while re.search(r"\\\s*\n", line):
             raw_line += line
-            _, line = _iter.__next__()
+            _, line = next(_iter)
         raw_line += line
     elif re.match(__func_start_regexp__, raw_line):
-        _, line = _iter.__next__()
+        _, line = next(_iter)
         stopiter = False
         scope_level = 0
         while not stopiter:
@@ -75,7 +75,7 @@ def prepare_lines_subparser(_iter, lineOffset, num, line, raw_line=None):
             if "}" in line:
                 scope_level -= 1
             try:
-                _, line = _iter.__next__()
+                _, line = next(_iter)
             except StopIteration:
                 stopiter = True
             if line.strip() == "}" and not scope_level:
@@ -86,7 +86,7 @@ def prepare_lines_subparser(_iter, lineOffset, num, line, raw_line=None):
         stopiter = False
         while not stopiter:
             try:
-                _, line = _iter.__next__()
+                _, line = next(_iter)
             except StopIteration:
                 stopiter = True
             if re.match("^[A-Za-z0-9#]+", line) or stopiter:
@@ -130,7 +130,7 @@ def prepare_lines(_file, lineOffset=0):
             for num, line in _iter:
                 prep_lines += prepare_lines_subparser(
                     _iter, lineOffset, num, line)
-    except FileNotFoundError:
+    except (IOError, OSError):
         pass
     return prep_lines
 
diff --git a/setup.py b/setup.py
index 8c2215e..5b79139 100644
--- a/setup.py
+++ b/setup.py
@@ -7,7 +7,7 @@ try:
     _long_description = subprocess.check_output(
         ["pandoc", "--from", "markdown", "--to", "markdown", "README.md"]).decode("utf-8")
     _long_description_content_type = "text/markdown"
-except (subprocess.CalledProcessError, FileNotFoundError):
+except (subprocess.CalledProcessError, IOError, OSError):
     pass
 
 requirements = []
-- 
2.32.0

