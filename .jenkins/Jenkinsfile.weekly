pipeline {
    agent none
    options {
        parallelsAlwaysFailFast()
    }
    stages {
        stage("pyro-next") {
            matrix {
                agent {
                    docker {
                        image "cart.lge.com/swte/yocto:16.04"
                    }
                }
                axes {
                    axis {
                        name "MACHINE"
                        values "qemuarm64", "qemuarm", "qemux86-64", "qemux86", "raspberrypi2"
                    }
                }
                stages {
                    stage("Test") {
                        environment {
                            MACHINE = "${MACHINE}"
                            DL_DIR = "${env.WORKSPACE}/build-res/downloads"
                            SSTATE_DIR = "${env.WORKSPACE}/build-res/sstate-cache"
                            BB_GENERATE_MIRROR_TARBALLS = "1"
                        }
                        steps {
                            sh '''#!/bin/bash
                               ./test/mini-mcf.py -c ./test/conf/report.conf -r ./meta-layers
                               source ./meta-layers/poky/oe-init-build-env
                               export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE DL_DIR SSTATE_DIR BB_GENERATE_MIRROR_TARBALLS"
                               bitbake core-image-minimal --runall=fetch
                               bitbake core-image-minimal -c reportall --runall=fetch
                               bitbake core-image-minimal -c populate_sdk --runall=fetch
                               bitbake core-image-minimal
                               bitbake core-image-minimal -c reportall
                               bitbake core-image-minimal -c populate_sdk
                               '''
                        }
                    }
                    stage("Cleanup") {
                        steps {
                            sh "rm -rf ${env.WORKSPACE}/build-res/downloads/git2"
                            sh "rm -rf ${env.WORKSPACE}/build-res/downloads/svn"
                            sh "find ${env.WORKSPACE}/build-res -name '*bad-checksum*' -delete"
                            sh "find ${env.WORKSPACE}/build-res/downloads -type f -name '*.done' -delete"
                        }
                    }
                    stage("Upload") {
                        environment {
                            AUTH = credentials("df64c294-9273-4b28-9625-a276771388c5")
                        }
                        steps {
                            dir("${env.WORKSPACE}/build-res") {
                                sh 'find . -type f -exec curl -u$AUTH_USR:$AUTH_PSW -T {} http://cart.lge.com/yocto-mirrors/{} \\;'
                            }
                        }
                    }
                }
                post {
                    always {
                        cleanWs disableDeferredWipeout: true
                    }
                }
            }  // matrix
        }  // stage
    }  // stages
}  // pipeline
